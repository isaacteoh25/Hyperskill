type: edu
files:
- name: engine.py
  visible: true
  text: |
    # write your code here
  learner_created: false
- name: test/files/ex/story_one.txt
  visible: false
  text: 'We found ourselves short of water at Hambledon Lock; so we took our jar and
    went up to the lock-keeper''s house to beg for some. George was our spokesman.
    He put on a winning smile, and said: "Oh, please could you spare us a little water?"
    "Certainly," replied the old gentleman; "take as much as you want, and leave the
    rest." "Thank you so much," murmured George, looking about him. "Where – where
    do you keep it?" "It''s always in the same place my boy," was the stolid reply:
    "just behind you." "I don''t see it," said George, turning round. "Why, bless
    us, where''s your eyes?" was the man''s comment, as he twisted George round and
    pointed up and down the stream. "There''s enough of it to see, ain''t there?"
    "Oh!" exclaimed George, grasping the idea; "but we can''t drink the river, you
    know!" "No; but you can drink SOME of it," replied the old fellow. "It''s what
    I''ve drunk for the last fifteen years." George told him that his appearance,
    after the course, did not seem a sufficiently good advertisement for the brand;
    and that he would prefer it out of a pump. We got some from a cottage a little
    higher up. I daresay THAT was only river water, if we had known. But we did not
    know, so it was all right. What the eye does not see, the stomach does not get
    upset over.'
  learner_created: false
- name: test/files/ex/story_two.txt
  visible: false
  text: |-
    We tried river water once, later on in the season, but it was not a success. We were coming down stream, and had pulled up to have tea in a backwater near Windsor. Our jar was empty, and it was a case of going without our tea or taking water from the river. Harris was for chancing it. He said it must be all right if we boiled the water. He said that the various germs of poison present in the water would be killed by the boiling. So we filled our kettle with Thames backwater, and boiled it; and very careful we were to see that it did boil. We had made the tea, and were just settling down comfortably to drink it, when George, with his cup half-way to his lips, paused and exclaimed: "What's that?"
    "What's what?" asked Harris and I.
    "Why that!" said George, looking westward.
    Harris and I followed his gaze, and saw, coming down towards us on the sluggish current, a dog. It was one of the quietest and peacefullest dogs I have ever seen. I never met a dog who seemed more contented – more easy in its mind. It was floating dreamily on its back, with its four legs stuck up straight into the air. It was what I should call a full-bodied dog, with a well-developed chest. On he came, serene, dignified, and calm, until he was abreast of our boat, and there, among the rushes, he eased up, and settled down cosily for the evening.
    George said he didn't want any tea, and emptied his cup into the water. Harris did not feel thirsty, either, and followed suit. I had drunk half mine, but I wished I had not.
    I asked George if he thought I was likely to have typhoid.
    He said: "Oh, no;" he thought I had a very good chance indeed of escaping it. Anyhow, I should know in about a fortnight, whether I had or had not.
  learner_created: false
- name: test/files/ex/story_four.txt
  visible: false
  text: "Now, this is a subject on which I flatter myself I really am au fait. The\
    \ gentleman who, when I was young, bathed me at wisdom's font for nine guineas\
    \ a term—no extras—used to say he never knew a boy who could do less work in more\
    \ time; and I remember my poor grandmother once incidentally observing, in the\
    \ course of an instruction upon the use of the Prayer-book, that it was highly\
    \ improbable that I should ever do much that I ought not to do, but that she felt\
    \ convinced beyond a doubt that I should leave undone pretty well everything that\
    \ I ought to do.\nI am afraid I have somewhat belied half the dear old lady's\
    \ prophecy. Heaven help me! I have done a good many things that I ought not to\
    \ have done, in spite of my laziness. But I have fully confirmed the accuracy\
    \ of her judgment so far as neglecting much that I ought not to have neglected\
    \ is concerned. Idling always has been my strong point. I take no credit to myself\
    \ in the matter—it is a gift. Few possess it. There are plenty of lazy people\
    \ and plenty of slow-coaches, but a genuine idler is a rarity. He is not a man\
    \ who slouches about with his hands in his pockets. On the contrary, his most\
    \ startling characteristic is that he is always intensely busy.\nIt is impossible\
    \ to enjoy idling thoroughly unless one has plenty of work to do. There is no\
    \ fun in doing nothing when you have nothing to do. Wasting time is merely an\
    \ occupation then, and a most exhausting one. Idleness, like kisses, to be sweet\
    \ must be stolen.\nMany years ago, when I was a young man, I was taken very ill—\
    I never could see myself that much was the matter with me, except that I had a\
    \ beastly cold. But I suppose it was something very serious, for the doctor said\
    \ that I ought to have come to him a month before, and that if it (whatever it\
    \ was) had gone on for another week he would not have answered for the consequences.\
    \ It is an extraordinary thing, but I never knew a doctor called into any case\
    \ yet but what it transpired that another day's delay would have rendered cure\
    \ hopeless. Our medical guide, philosopher, and friend is like the hero in a melodrama—\
    he always comes upon the scene just, and only just, in the nick of time. It is\
    \ Providence, that is what it is.\nWell, as I was saying, I was very ill and was\
    \ ordered to Buxton for a month, with strict injunctions to do nothing whatever\
    \ all the while that I was there. \"Rest is what you require,\" said the doctor,\
    \ \"perfect rest.\"\nIt seemed a delightful prospect. \"This man evidently understands\
    \ my complaint,\" said I, and I pictured to myself a glorious time—a four weeks'\
    \ dolce far niente with a dash of illness in it. Not too much illness, but just\
    \ illness enough—just sufficient to give it the flavor of suffering and make it\
    \ poetical. I should get up late, sip chocolate, and have my breakfast in slippers\
    \ and a dressing-gown. I should lie out in the garden in a hammock and read sentimental\
    \ novels with a melancholy ending, until the books should fall from my listless\
    \ hand, and I should recline there, dreamily gazing into the deep blue of the\
    \ firmament, watching the fleecy clouds floating like white-sailed ships across\
    \ its depths, and listening to the joyous song of the birds and the low rustling\
    \ of the trees. Or, on becoming too weak to go out of doors, I should sit propped\
    \ up with pillows at the open window of the ground-floor front, and look wasted\
    \ and interesting, so that all the pretty girls would sigh as they passed by.\n\
    And twice a day I should go down in a Bath chair to the Colonnade to drink the\
    \ waters. Oh, those waters! I knew nothing about them then, and was rather taken\
    \ with the idea. \"Drinking the waters\" sounded fashionable and Queen Anne-fied,\
    \ and I thought I should like them. But, ugh! after the first three or four mornings!\
    \ Sam Weller's description of them as \"having a taste of warm flat-irons\" conveys\
    \ only a faint idea of their hideous nauseousness. If anything could make a sick\
    \ man get well quickly, it would be the knowledge that he must drink a glassful\
    \ of them every day until he was recovered. I drank them neat for six consecutive\
    \ days, and they nearly killed me; but after then I adopted the plan of taking\
    \ a stiff glass of brandy-and-water immediately on the top of them, and found\
    \ much relief thereby. I have been informed since, by various eminent medical\
    \ gentlemen, that the alcohol must have entirely counteracted the effects of the\
    \ chalybeate properties contained in the water. I am glad I was lucky enough to\
    \ hit upon the right thing.\nBut \"drinking the waters\" was only a small portion\
    \ of the torture I experienced during that memorable month—a month which was,\
    \ without exception, the most miserable I have ever spent. During the best part\
    \ of it I religiously followed the doctor's mandate and did nothing whatever,\
    \ except moon about the house and garden and go out for two hours a day in a Bath\
    \ chair. That did break the monotony to a certain extent. There is more excitement\
    \ about Bath-chairing—especially if you are not used to the exhilarating exercise—\
    than might appear to the casual observer. A sense of danger, such as a mere outsider\
    \ might not understand, is ever present to the mind of the occupant. He feels\
    \ convinced every minute that the whole concern is going over, a conviction which\
    \ becomes especially lively whenever a ditch or a stretch of newly macadamized\
    \ road comes in sight. Every vehicle that passes he expects is going to run into\
    \ him; and he never finds himself ascending or descending a hill without immediately\
    \ beginning to speculate upon his chances, supposing—as seems extremely probable—\
    that the weak-kneed controller of his destiny should let go.\nBut even this diversion\
    \ failed to enliven after awhile, and the ennui became perfectly unbearable. I\
    \ felt my mind giving way under it. It is not a strong mind, and I thought it\
    \ would be unwise to tax it too far. So somewhere about the twentieth morning\
    \ I got up early, had a good breakfast, and walked straight off to Hayfield, at\
    \ the foot of the Kinder Scout—a pleasant, busy little town, reached through a\
    \ lovely valley, and with two sweetly pretty women in it. At least they were sweetly\
    \ pretty then; one passed me on the bridge and, I think, smiled; and the other\
    \ was standing at an open door, making an unremunerative investment of kisses\
    \ upon a red-faced baby. But it is years ago, and I dare say they have both grown\
    \ stout and snappish since that time. Coming back, I saw an old man breaking stones,\
    \ and it roused such strong longing in me to use my arms that I offered him a\
    \ drink to let me take his place. He was a kindly old man and he humored me. I\
    \ went for those stones with the accumulated energy of three weeks, and did more\
    \ work in half an hour than he had done all day. But it did not make him jealous.\n\
    Having taken the plunge, I went further and further into dissipation, going out\
    \ for a long walk every morning and listening to the band in the pavilion every\
    \ evening. But the days still passed slowly notwithstanding, and I was heartily\
    \ glad when the last one came and I was being whirled away from gouty, consumptive\
    \ Buxton to London with its stern work and life. I looked out of the carriage\
    \ as we rushed through Hendon in the evening. The lurid glare overhanging the\
    \ mighty city seemed to warm my heart, and when, later on, my cab rattled out\
    \ of St. Pancras' station, the old familiar roar that came swelling up around\
    \ me sounded the sweetest music I had heard for many a long day.\nI certainly\
    \ did not enjoy that month's idling. I like idling when I ought not to be idling;\
    \ not when it is the only thing I have to do. That is my pig-headed nature. The\
    \ time when I like best to stand with my back to the fire, calculating how much\
    \ I owe, is when my desk is heaped highest with letters that must be answered\
    \ by the next post. When I like to dawdle longest over my dinner is when I have\
    \ a heavy evening's work before me. And if, for some urgent reason, I ought to\
    \ be up particularly early in the morning, it is then, more than at any other\
    \ time, that I love to lie an extra half-hour in bed.\nAh! how delicious it is\
    \ to turn over and go to sleep again: \"just for five minutes.\" Is there any\
    \ human being, I wonder, besides the hero of a Sunday-school \"tale for boys,\"\
    \ who ever gets up willingly? There are some men to whom getting up at the proper\
    \ time is an utter impossibility. If eight o'clock happens to be the time that\
    \ they should turn out, then they lie till half-past. If circumstances change\
    \ and half-past eight becomes early enough for them, then it is nine before they\
    \ can rise. They are like the statesman of whom it was said that he was always\
    \ punctually half an hour late. They try all manner of schemes. They buy alarm-clocks\
    \ (artful contrivances that go off at the wrong time and alarm the wrong people).\
    \ They tell Sarah Jane to knock at the door and call them, and Sarah Jane does\
    \ knock at the door and does call them, and they grunt back \"awri\" and then\
    \ go comfortably to sleep again. I knew one man who would actually get out and\
    \ have a cold bath; and even that was of no use, for afterward he would jump into\
    \ bed again to warm himself.\nI think myself that I could keep out of bed all\
    \ right if I once got out. It is the wrenching away of the head from the pillow\
    \ that I find so hard, and no amount of over-night determination makes it easier.\
    \ I say to myself, after having wasted the whole evening, \"Well, I won't do any\
    \ more work to-night; I'll get up early to-morrow morning;\" and I am thoroughly\
    \ resolved to do so—then. In the morning, however, I feel less enthusiastic about\
    \ the idea, and reflect that it would have been much better if I had stopped up\
    \ last night. And then there is the trouble of dressing, and the more one thinks\
    \ about that the more one wants to put it off.\nIt is a strange thing this bed,\
    \ this mimic grave, where we stretch our tired limbs and sink away so quietly\
    \ into the silence and rest. \"O bed, O bed, delicious bed, that heaven on earth\
    \ to the weary head,\" as sang poor Hood, you are a kind old nurse to us fretful\
    \ boys and girls. Clever and foolish, naughty and good, you take us all in your\
    \ motherly lap and hush our wayward crying. The strong man full of care—the sick\
    \ man full of pain—the little maiden sobbing for her faithless lover—like children\
    \ we lay our aching heads on your white bosom, and you gently soothe us off to\
    \ by-by.\nOur trouble is sore indeed when you turn away and will not comfort us.\
    \ How long the dawn seems coming when we cannot sleep! Oh! those hideous nights\
    \ when we toss and turn in fever and pain, when we lie, like living men among\
    \ the dead, staring out into the dark hours that drift so slowly between us and\
    \ the light. And oh! those still more hideous nights when we sit by another in\
    \ pain, when the low fire startles us every now and then with a falling cinder,\
    \ and the tick of the clock seems a hammer beating out the life that we are watching.\n\
    But enough of beds and bedrooms. I have kept to them too long, even for an idle\
    \ fellow. Let us come out and have a smoke. That wastes time just as well and\
    \ does not look so bad. Tobacco has been a blessing to us idlers. What the civil-service\
    \ clerk before Sir Walter's time found to occupy their minds with it is hard to\
    \ imagine. I attribute the quarrelsome nature of the Middle Ages young men entirely\
    \ to the want of the soothing weed. They had no work to do and could not smoke,\
    \ and the consequence was they were forever fighting and rowing. If, by any extraordinary\
    \ chance, there was no war going, then they got up a deadly family feud with the\
    \ next-door neighbor, and if, in spite of this, they still had a few spare moments\
    \ on their hands, they occupied them with discussions as to whose sweetheart was\
    \ the best looking, the arguments employed on both sides being battle-axes, clubs,\
    \ etc. Questions of taste were soon decided in those days. When a twelfth-century\
    \ youth fell in love he did not take three paces backward, gaze into her eyes,\
    \ and tell her she was too beautiful to live. He said he would step outside and\
    \ see about it. And if, when he got out, he met a man and broke his head—the other\
    \ man's head, I mean—then that proved that his—the first fellow's—girl was a pretty\
    \ girl. But if the other fellow broke his head—not his own, you know, but the\
    \ other fellow's—the other fellow to the second fellow, that is, because of course\
    \ the other fellow would only be the other fellow to him, not the first fellow\
    \ who—well, if he broke his head, then his girl—not the other fellow's, but the\
    \ fellow who was the—Look here, if A broke B's head, then A's girl was a pretty\
    \ girl; but if B broke A's head, then A's girl wasn't a pretty girl, but B's girl\
    \ was. That was their method of conducting art criticism.\nNowadays we light a\
    \ pipe and let the girls fight it out among themselves.\nThey do it very well.\
    \ They are getting to do all our work. They are doctors, and barristers, and artists.\
    \ They manage theaters, and promote swindles, and edit newspapers. I am looking\
    \ forward to the time when we men shall have nothing to do but lie in bed till\
    \ twelve, read two novels a day, have nice little five-o'clock teas all to ourselves,\
    \ and tax our brains with nothing more trying than discussions upon the latest\
    \ patterns in trousers and arguments as to what Mr. Jones' coat was made of and\
    \ whether it fitted him. It is a glorious prospect—for idle fellows. \n"
  learner_created: false
- name: test/files/ex/story_three.txt
  visible: false
  text: |-
    We stopped at a little shoe shop in Astley street that looked like the place we wanted. It was one of those shops that the moment they are open in the morning put their goods all round them. Boxes of boots stood near the door. Boots hung over the doors and windows. Inside the shop boots stood on the shelves and on the floor all around. The shopkeeper, when we came in, was busy with a chisel and hammer opening a new large box full of boots.
    George raised his hat, and said "Good-morning." He hoped, in answer to his politeness, to hear the polite "Welcome to our shop," as this was the answer in the conversation book.
    But the man did not even look at us.
    George said: " Mr. X., my friend, has recommended your shop to me."
    To these words the conversation book gave the answer: "Mr. X is a very fine young man. I've known him for years, and I'll be happy to be useful to his friends."
    But the man said: "Don't know him; never heard of him."
    That was a nice beginning. George looked into the conversation book again. The book gave three or four methods of buying boots; George chose the one about "Mr. X," as being the politest. At first you should talk with the shopkeeper about this "Mr. X," and then, after coming to the better understanding, you begin to talk naturally about the object of your coming, namely, that you want to buy boots, "cheap and good."
    But it seemed that the man didn't know anything about the niceties of trade business. He didn't want to understand George. So, George stopped talking about "Mr. X," and looked into the conversation book again. He chose some sentence on the page.  It was an unlucky choice in this place, because it says: "They say that you have here boots for sale."
    For the first time the man put down his hammer and chisel, and looked at us. He said slowly: "What do you think I keep boots for—to smell them?"
    He began quietly and grew more and more angry as he continued.
    "What do you think I am," he asked, "a boot collector? Do you think I love the boots, and can't part with a pair? Do you think I hang them around here to look at them? Where do you think you are—in a museum of boots? Have you ever heard of a man who has a boot shop and does not sell boots? What do you take me for—an idiot?"
    I have always said that these conversation books are never of any real use. "We had better leave," said Harris and started for the door. But George suddenly found the answer in the book, the best sentence he could find at the moment. He said: "We will come again, when, perhaps, you will have some more boots to show me. Till then, adieu!"
    With that we came out, took the cab and drove away, leaving the man standing in the doors of his shop. What he said, I did not hear, but the passers-by found it very interesting.
  learner_created: false
- name: test/search.py
  visible: false
  text: |
    """
    SearchEngine
    This module does searching for positions of tokens in database
    """
    from test.tokenizator import Tokenizator
    from test.windows import Context_Window


    class SearchEngine(object):
        """
        class SearchEngine
        """

        def __init__(self):

            self.tokenizator = Tokenizator()

        def get_dict(self, database, tok_str):
            """
            This function performs searching for positions of a given token
            @param tok_str: str containing token
            @return: dictionary, where a key is a filename
            and a value is a list of positions
            """

            if not isinstance(tok_str, str):
                raise TypeError('Input has an unappropriate type!')
            if not isinstance(database, dict):
                raise TypeError('Input has an unappropriate type!')

            if tok_str in database:
                return database[tok_str]
            else:
                return {}

        def get_dict_many_tokens(self, database, tok_str):
            """
            This function performs searching for positions of given tokens
            @param tok_str: str containing tokens
            @return: dictionary, where a key is a filename
            and a value is a list of positions of all tokens
            """

            if not isinstance(tok_str, str):
                raise TypeError('Input has an unappropriate type!')
            if not tok_str:
                return {}
            big_dict_files = []
            for token in self.tokenizator.token_gen(tok_str):
                big_dict_files.append(self.get_dict(database, token.s))

            files = set(big_dict_files[0])
            for file_dict in big_dict_files[1:]:
                files = files.intersection(set(file_dict))

            output_dict = {}
            for filename in files:
                for token in self.tokenizator.token_gen(tok_str):
                    output_dict.setdefault(filename, []).extend(database[token.s][filename])
                output_dict[filename].sort()
            return output_dict

        def get_dict_many_tokens_limit_offset(self, database, tok_str, limit, offset):
            """
            This function performs searching for positions of given tokens
            @param tok_str: str containing tokens
            @param limit: number of files to be returned
            @param offset: from which file to start
            @return: dictionary, where a key is a filename
            @database: a database where we search
            and a value is a list of positions of all tokens
            """

            if not isinstance(tok_str, str):
                raise TypeError('Input has an unappropriate type!')

            if not isinstance(limit, int) or not isinstance(offset, int):
                raise TypeError('Input has an unappropriate type!')

            if not tok_str:
                return {}

            if offset < 0:
                offset = 0

            big_dict_files = []
            for token in self.tokenizator.token_gen(tok_str):
                big_dict_files.append(self.get_dict(database, token.s))
            files = set(big_dict_files[0])
            for file_dict in big_dict_files[1:]:
                files = files.intersection(set(file_dict))
            resulted_files = sorted(files)[offset: limit + offset]
            output_dict = {}
            for filename in resulted_files:
                for token in self.tokenizator.token_gen(tok_str):
                    output_dict.setdefault(filename, []).extend(database[token.s][filename])
                output_dict[filename].sort()
            return output_dict

        def get_formated_result(self, database, tok_str, limit, offset):
            result = self.get_dict_many_tokens_limit_offset(database, tok_str, limit=3, offset=0)
            formated_result = '; '.join([f'{key}: {value}' for key, value in result.items()])
            return formated_result

        def get_modified_search(self, database, query, window_size, limit, offset):
            simple_search_dict = self.get_dict_many_tokens_limit_offset(database, query, limit, offset)
            windows = {}
            for filename, positions_lists in simple_search_dict.items():
                win_array = []
                for position in positions_lists:
                    window = Context_Window.get_window(filename, position, window_size)
                    win_array.append(window)
                windows.setdefault(filename, []).extend(win_array)
            for filename, win_array in windows.items():
                for window in win_array:
                    window.extend_window()
            for filename, win_array in windows.items():
                i = 0
                while i < len(win_array) - 1:
                    if win_array[i].is_crossed(win_array[i + 1]):
                        win_array[i].get_united_window(win_array[i + 1])
                        win_array.remove(win_array[i + 1])
                    else:
                        i += 1
            output_dictionary = {}
            for filename, win_array in windows.items():
                win_list = []
                for window in win_array:
                    window.string.strip()
                    win_list.append(window)
                output_dictionary.setdefault(filename, []).extend(win_list)
            return output_dictionary

        def get_search_engine(self, database, query, window_size, limit, offset, pairs):
            '''
            This function performs searching a query in database and returns
            a dictionary filemname:query in string format
            @param query: query to search
            @param window_size: a size of a context window
            @param limit: max number of documents to show
            @param offset: document number to start with
            @param pairs: list of pairs that show limit and offset of each concrete document,
            no more quotes can be shown than this doclimit
            @return: dictionary {filename: [query(str)]}
            '''

            if not isinstance(query, str) or not isinstance(limit, int) or not isinstance(offset, int):
                raise TypeError('Input has an unappropriate type! %s, %s, %s' % (query, limit, offset))

            output_dict = dict()
            qunum = 0
            dictionary = self.get_modified_search(database, query, window_size, limit, offset)
            for filename in sorted(dictionary):
                output_dict.setdefault(filename, [])
                all_quotes = dictionary[filename]
                qulim = pairs[qunum][0]
                if not qulim:
                    qulim = 3
                quset = pairs[qunum][1]
                if not quset:
                    quset = 0
                for num, quote in enumerate(all_quotes):
                    if num == qulim + quset:
                        break
                    if num >= quset and num < qulim + quset:
                        output_dict[filename].append(quote.highlight_window().strip())
                qunum += 1
            for filename, qulist in output_dict.items():
                for num, quote in enumerate(qulist):
                    quote = str(num + 1) + '. ' + quote
                    output_dict[filename][num] = quote
            for filename, qulist in output_dict.items():
                formated_values = '\n'.join(qulist)
                output_dict[filename] = formated_values
            return output_dict
  learner_created: false
- name: test/indexer.py
  visible: false
  text: "\"\"\"\nIndexator\nThis module performs indexing of a text in a given file\n\
    \"\"\"\nfrom test.tokenizator import Tokenizator\nfrom functools import total_ordering\n\
    \n\nclass Position(object):\n    \"\"\"\n    Class Position\n    Cointains positions\
    \ of each token\n    \"\"\"\n\n    def __init__(self, start, end):\n        \"\
    \"\"\n        @param start: position on the 1st element of a token\n        @param\
    \ end: position on the last element of a token\n        \"\"\"\n        self.start\
    \ = start\n        self.end = end\n\n    def __eq__(self, position):\n\n     \
    \   return self.start == position.start and self.end == position.end\n\n    def\
    \ __repr__(self):\n\n        return str(self.start) + ',' + str(self.end)\n\n\
    @total_ordering\nclass Position_Plus(Position):\n    \"\"\"\n    Class Position\n\
    \    Cointains positions of each token\n    \"\"\"\n\n    def __init__(self, lnumber,\
    \ start, end):\n        \"\"\"\n        @param start: position on the 1st element\
    \ of a token\n        @param end: position on the last element of a token\n  \
    \      @param lnumber: number of a line in a given text\n        \"\"\"\n\n  \
    \      self.start = start\n        self.end = end\n        self.lnumber = lnumber\n\
    \n    def __eq__(self, position):\n\n        return self.lnumber == position.lnumber\
    \ and self.start == position.start and self.end == position.end\n\n    def __lt__(self,\
    \ other_pos):\n        '''\n        This function compares two positions, i.e.\
    \ their parameters\n        and returns the result of this comparison\n      \
    \  @param other_pos: position that is to be compared with self\n        @return:\
    \ comparison_result, i.e. True or False if one position less than another\n  \
    \      '''\n        return ((self.lnumber < other_pos.lnumber)\n             \
    \   or ((self.lnumber == other_pos.lnumber)\n                and (self.start <\
    \ other_pos.start)))\n\n    def __repr__(self):\n\n        return str(self.lnumber)\
    \ + ','+ str(self.start) + ',' + str(self.end)\n\n\nclass Indexer_Dict(object):\n\
    \    def __init__(self):\n\n        self.tokenizator = Tokenizator()\n\n\n   \
    \ def get_index_dict(self, filename):\n        \"\"\"\n        This function performs\
    \ indexing of a text in a given file\n        \"\"\"\n        if  not isinstance(filename,\
    \ str):\n            raise TypeError('Input has an unappropriate type!')\n   \
    \     my_file = open(filename)\n        output_dict = {}\n        for lnumber,line\
    \ in enumerate(my_file):\n            if not line:\n                lnumber+=1\n\
    \            for token in self.tokenizator.token_gen(line):\n                start\
    \ = token.position\n                end = start + len(token.s)\n             \
    \   pos = Position_Plus(lnumber, start, end)\n                output_dict.setdefault(token.s,\
    \ {}).setdefault(filename, []).append(pos)\n            lnumber+=1\n        my_file.close()\n\
    \        return output_dict\n    \n    def get_formated_result(self, filename):\n\
    \        result = self.get_index_dict(filename)\n        formated_result = ';\
    \ '.join([f'{key}: {value}' for key, value in result.items()])\n        return\
    \ formated_result\n"
  learner_created: false
- name: test/windows.py
  visible: false
  text: "\"\"\"\nContext_Windows\nThis module returns context windows for each query\
    \ word\n\"\"\"\nfrom test.tokenizator import Tokenizator\nimport re\n\nPATTERN_RIGHT\
    \ = re.compile(r'[\\.!?] [A-ZА-Яa-zа-я]')\nPATTERN_LEFT = re.compile(r'[A-ZА-Я\
    a-zа-я] [\\.!?]')\n\n\nclass Context_Window(object):\n    \"\"\"\n    class Context_Window\n\
    \    \"\"\"\n    tokenizator = Tokenizator()\n\n    def __init__(self, string,\
    \ positions, win_start, win_end):\n        \"\"\"\n        Constructor of a context\
    \ window\n        @param positions: positions of tokens\n        @param string:\
    \ string representation of a token\n        @param win_start: position where window\
    \ starts\n        @param win_end: position where window ends\n        \"\"\"\n\
    \n        self.string = string\n        self.positions = positions\n        self.win_start\
    \ = win_start\n        self.win_end = win_end\n\n    def __eq__(self, window):\n\
    \n        return self.string == window.string and self.positions == window.positions\
    \ and self.win_start == window.win_start and self.win_end == window.win_end\n\n\
    \    def __repr__(self):\n\n        return str(self.string) + ' ' + str(self.positions)\
    \ + ' ' + str(self.win_start) + ' ' + str(self.win_end)\n\n    @classmethod\n\
    \    def get_window(cls, filename, position, win_size):\n        \"\"\"\n    \
    \    This function returns a context window of a given token's position\n    \
    \    @param filename: a name of a file where token is to be found\n        @param\
    \ position: a position of a token\n        @param win_size: desirable size of\
    \ the context window\n        @return: a context window\n        \"\"\"\n    \
    \    if not isinstance(filename, str) or not isinstance(win_size, int):\n    \
    \        raise TypeError('Input has an unappropriate type! %s, %s' % (filename,\
    \ win_size))\n        positions = []\n        position = [position.lnumber, position.start,\
    \ position.end]\n        positions.append(position)\n        win_end = 0\n   \
    \     win_start = 0\n        string = None\n        str_num = position[0]\n  \
    \      my_file = open(filename)\n        for lnumber, my_string in enumerate(my_file):\n\
    \            if lnumber == str_num:\n                string = my_string\n    \
    \            break\n\n        if string == None:\n            my_file.close()\n\
    \            raise TypeError('This string was not found!')\n\n        for tok_num,\
    \ token in enumerate(cls.tokenizator.token_gen(string[position[1]:])):\n     \
    \       if tok_num == 0:\n                win_end = position[2]\n            if\
    \ tok_num == win_size:\n                win_end = token.position + len(token.s)\
    \ + position[1]\n                break\n\n        for tok_num, token in enumerate(cls.tokenizator.token_gen(string[:position[2]][::-1])):\n\
    \            if tok_num == win_size:\n                win_start = position[2]\
    \ - token.position - len(token.s)\n                break\n\n        my_file.close()\n\
    \        return cls(string, positions, win_start, win_end)\n\n    @classmethod\n\
    \    def get_formated_result(cls, filename, position, win_size):\n        if win_size\
    \ != 0:\n            result = cls.get_window(filename, position, win_size)\n \
    \           string = result.string\n            positions = str(result.positions)\n\
    \            start = str(result.win_start)\n            end = str(result.win_end)\n\
    \            formated_result = string.strip() + '|' + positions + '|' + start\
    \ + '|' + end\n            return formated_result\n        else:\n           \
    \ return ''\n\n    def get_formated_window(self, w2):\n        if not isinstance(w2,\
    \ Context_Window):\n            raise TypeError('Input has an unappropriate type!')\n\
    \        if self.is_crossed(w2):\n            self.get_united_window(w2)\n   \
    \         self.extend_window()\n            highlighted = self.highlight_window()\n\
    \            formated_window = highlighted.strip() + '|' + str(self.positions)\
    \ + '|' + str(self.win_start) + '|' + str(\n                self.win_end)\n  \
    \          return formated_window\n        else:\n            self.extend_window()\n\
    \            w2.extend_window()\n            highlighted_win1 = self.highlight_window()\n\
    \            highlighted_win2 = w2.highlight_window()\n            formated_win1\
    \ = highlighted_win1.strip() + '|' + str(self.positions) + '|' + str(\n      \
    \          self.win_start) + '|' + str(self.win_end)\n            formated_win2\
    \ = highlighted_win2.strip() + '|' + str(w2.positions) + '|' + str(w2.win_start)\
    \ + '|' + str(\n                w2.win_end)\n            result = formated_win1\
    \ + ' \\n' + formated_win2\n            return result\n\n    def is_crossed(self,\
    \ window_B):\n        '''\n        This function checks if windows are crossed\n\
    \        @param window_B: the second window\n        @return: True or False\n\
    \        '''\n        if not isinstance(window_B, Context_Window):\n         \
    \   raise TypeError('Input has an unappropriate type!')\n        if self.win_start\
    \ <= window_B.win_end and self.win_end >= window_B.win_start and self.positions[0][0]\
    \ == \\\n                window_B.positions[0][0]:\n            return True\n\
    \        if self.win_start == window_B.win_start and self.win_end == window_B.win_end\
    \ and self.positions[0][0] == \\\n                window_B.positions[0][0]:\n\
    \            return True\n        else:\n            return False\n\n    def is_crossed_old_version(self,\
    \ window_B):\n        '''\n        This function checks if windows are crossed\n\
    \        @param window_B: the second window\n        @return: True or False\n\
    \        '''\n        if not isinstance(window_B, Context_Window):\n         \
    \   raise TypeError('Input has an unappropriate type!')\n        if self.win_start\
    \ <= window_B.win_end and self.win_end >= window_B.win_start and self.positions[0].lnumber\
    \ == \\\n                window_B.positions[0].lnumber:\n            return True\n\
    \        if self.win_start == window_B.win_start and self.win_end == window_B.win_end\
    \ and self.positions[0].lnumber == \\\n                window_B.positions[0].lnumber:\n\
    \            return True\n        else:\n            return False\n\n    def get_united_window(self,\
    \ window_B):\n\n        '''\n        This function unites two windows\n      \
    \  @param window_B: the second window\n        It changes self so that is has\
    \ new positions and returns nothing!!\n        '''\n\n        if not isinstance(window_B,\
    \ Context_Window):\n            raise TypeError('Input has an unappropriate type!')\n\
    \n        self.positions.extend(window_B.positions)\n        self.win_start =\
    \ min(window_B.win_start, self.win_start)\n        self.win_end = max(window_B.win_end,\
    \ self.win_end)\n\n    def extend_window(self):\n        '''\n        This function\
    \ extends a given window to sentence\n        @return: an extended window\n  \
    \      '''\n        to_right = self.string[self.win_end:]\n        to_left = self.string[:self.win_start\
    \ + 1][::-1]\n        left = PATTERN_LEFT.search(to_left)\n        right = PATTERN_RIGHT.search(to_right)\n\
    \        if left is None:\n            self.win_start = 0\n        else:\n   \
    \         self.win_start -= left.start()\n        if right is None:\n        \
    \    self.win_end = len(self.string)\n        else:\n            self.win_end\
    \ += right.start() + 1\n\n    def highlight_window(self):\n        '''\n     \
    \   This function takes a substring of window string,\n        which corresponds\
    \ to the window size and highlights it \n        '''\n        win_string = self.string[self.win_start:self.win_end]\n\
    \        fin = '</b>'\n        st = '<b>'\n        for position in reversed(self.positions):\n\
    \            end = position[2] - self.win_start\n            begin = position[1]\
    \ - self.win_start\n            win_string_one = win_string[:end] + fin + win_string[end:]\n\
    \            win_string = win_string_one[:begin] + st + win_string_one[begin:]\n\
    \        return win_string\n"
  learner_created: false
- name: test/tokenizator.py
  visible: false
  text: |+
    import unicodedata

    """
    Tokenizator
    This module performs the morphological analyses of a text and extracts tokens
    """


    class Token(object):
        """
        Class of tokens taken from a given text
        """

        def __init__(self, position, s):
            """
            Consrtuctor for token.
            @param self: self is an odject(here:token) with attributes
            @param position: position is an index of the first element of token
            @param s: s is a string view of a token
            @return: token
            """
            self.position = position
            self.s = s

        def __repr__(self):
            """
            The way the programm returns the final result.
            """
            return self.s + '_' + str(self.position)


    class Token_Type(Token):
        """
        Class of tokens taken from a given text
        """

        def __init__(self, s, tp, position):
            """
            Consrtuctor for token.
            @param self: self is an odject(here:token) with attributes
            @param s: s is a string view of a token
            @param tp: tp is a type of a token
            @return: token with it's type
            """
            self.s = s
            self.tp = tp
            self.position = position

        def __repr__(self):
            """
            The way the programm returns the final result.
            """
            return self.s + '_' + self.tp + '_' + str(self.position)


    class Tokenizator(object):
        """
        Class that returns tokens
        """

        def tokenize(self, stream):
            """
            This is a function.
            @param stream:stream is a text given
            @return: a list of tokens from the given text
            """
            if not isinstance(stream, str):
                raise ValueError('Input has an unappropriate type, it should be str')
            tokensback = []
            for i, c in enumerate(stream):
                if c.isalpha() and (not stream[i - 1].isalpha() or i == 0):
                    position = i
                if not c.isalpha() and i > 0 and stream[i - 1].isalpha():
                    s = stream[position:i]
                    t = Token(position, s)
                    tokensback.append(t)
            if c.isalpha():
                s = stream[position:i + 1]
                t = Token(position, s)
                tokensback.append(t)
            return tokensback

        def tokens_generator(self, stream):
            """
            This is a generator.
            @param stream:stream is a text given
            @return: tokens from the given text
            """
            if not isinstance(stream, str):
                raise ValueError('Input has an unappropriate type, it should be str')
            for i, c in enumerate(stream):
                if c.isalpha() and (not stream[i - 1].isalpha() or i == 0):
                    position = i
                if not c.isalpha() and i > 0 and stream[i - 1].isalpha():
                    s = stream[position:i]
                    t = Token(position, s)
                    yield (t)
            if c.isalpha():
                s = stream[position:i + 1]
                t = Token(position, s)
                yield (t)

        @staticmethod
        def tokens_type_definition(x):
            """
            This is a static method, which defines a type of a token
            @return: type of a token
            """
            tp = 'type'
            if x.isalpha():
                tp = 'alpha'
            if x.isdigit():
                tp = 'digit'
            if x.isspace():
                tp = 'space'
            if unicodedata.category(x)[0] == 'P':
                tp = 'punct'
            return tp

        def tokens_generator_plus_type(self, stream):
            """
            This is a generator.
            @param stream:stream is a text given
            @return: tokens from the given text plus their type
            """
            if not isinstance(stream, str):
                raise ValueError('Input has an unappropriate type, it should be str')
            position = 0
            for i, c in enumerate(stream):
                if self.tokens_type_definition(c) != self.tokens_type_definition(stream[i - 1]) and i > 0:
                    tp = self.tokens_type_definition(stream[i - 1])
                    s = stream[position:i]
                    position = i
                    t = Token_Type(s, tp, position)
                    yield (t)
            if self.tokens_type_definition(c):
                tp = self.tokens_type_definition(c)
                s = stream[position:i + 1]
                t = Token_Type(s, tp, position)
                yield (t)

        def tokens_generator_plus_type_optimized(self, stream):
            """
            This is a generator.
            @param stream:stream is a text given
            @return: tokens from the given text plus their type
            """
            if not isinstance(stream, str):
                raise ValueError('Input has an unappropriate type, it should be str')
            position = 0
            tp_of_c = self.tokens_type_definition(stream[0])
            for i, c in enumerate(stream):
                if i > 0 and self.tokens_type_definition(c) != tp_of_c:
                    tp = tp_of_c
                    tp_of_c = self.tokens_type_definition(c)
                    s = stream[position:i]
                    t = Token_Type(s, tp, position)
                    position = i
                    yield (t)
            tp = self.tokens_type_definition(c)
            s = stream[position:i + 1]
            t = Token_Type(s, tp, position)
            yield (t)

        def token_gen(self, stream):
            if not stream:
                print('None')
            if len(stream) == 0:
                yield None
            for token in self.tokens_generator_plus_type_optimized(stream):
                if token.tp == 'alpha' or token.tp == 'digit':
                    yield (token)

        def token_gen_format(self, stream):
            token_string = ''
            for token in self.tokens_generator_plus_type_optimized(stream):
                if token.tp == 'alpha' or token.tp == 'digit':
                    token_format = token.s + '_' + token.tp + '_' + str(token.position)
                    token_string += token_format + '\n'
            return token_string


    if __name__ == '__main__':
        x = Tokenizator()


  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase
    from test.indexer import Indexer_Dict
    from test.search import SearchEngine
    import os

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    x = SearchEngine()
    ind = Indexer_Dict()
    dir = os.path.join("test", "files", "ex")

    database = {}

    for filename in os.listdir(dir):
        if filename.endswith('.txt'):
            dictionary = ind.get_index_dict(os.path.join(dir, filename))
            for key in dictionary.keys():
                value_dict = dictionary[key]
                for k in value_dict.keys():
                    database.setdefault(key, {}).setdefault(k, []).extend(value_dict[k])

    query1 = 'George'
    query2 = 'Hambledon Lock'
    query3 = 'water'
    query4 = 'Count Dracula'
    query5 = 'Scarlett'

    param1 = [1, 3, 0, [(1, 0), (1, 0), (2, 0)]]
    param2 = [2, 3, 0, [(1, 0), (2, 0), (1, 0)]]
    param3 = [3, 4, 0, [(3, 0), (1, 0), (2, 0), (4, 0)]]
    param4 = [2, 4, 1, [(2, 0), (2, 0), (3, 0), (1, 0)]]
    param5 = [4, 0, 0, [(1, 0), (5, 0), (3, 0), (1, 0)]]

    input1 = f"{dir}\n'{query1}';{param1[0]};{param1[1]};{param1[2]};{';'.join([','.join([str(val) for val in param_pair]) for param_pair in param1[3]])}"
    input2 = f"{dir}\n'{query2}';{param2[0]};{param2[1]};{param2[2]};{';'.join([','.join([str(val) for val in param_pair]) for param_pair in param2[3]])}"
    input3 = f"{dir}\n'{query3}';{param3[0]};{param3[1]};{param3[2]};{';'.join([','.join([str(val) for val in param_pair]) for param_pair in param3[3]])}"
    input4 = f"{dir}\n'{query4}';{param4[0]};{param4[1]};{param4[2]};{';'.join([','.join([str(val) for val in param_pair]) for param_pair in param4[3]])}"
    input5 = f"{dir}\n'{query5}';{param5[0]};{param5[1]};{param5[2]};{';'.join([','.join([str(val) for val in param_pair]) for param_pair in param5[3]])}"


    class SearchTest(StageTest):
        def generate(self):
            return [TestCase(stdin=input1,
                             attach=x.get_search_engine(database,
                                                        query=query1, window_size=param1[0],
                                                        limit=param1[1], offset=param1[2],
                                                        pairs=param1[3])),
                    TestCase(stdin=input2,
                             attach=x.get_search_engine(database,
                                                        query=query2,
                                                        window_size=param2[0], limit=param2[1], offset=param2[2],
                                                        pairs=param2[3])),
                    TestCase(stdin=input3,
                             attach=x.get_search_engine(database,
                                                        query=query3,
                                                        window_size=param3[0], limit=param3[1], offset=param3[2],
                                                        pairs=param3[3])),
                    TestCase(stdin=input4,
                             attach=x.get_search_engine(database,
                                                        query=query4,
                                                        window_size=param4[0], limit=param4[1], offset=param4[2],
                                                        pairs=param4[3])),
                    TestCase(stdin=input5,
                             attach=x.get_search_engine(database,
                                                        query=query5,
                                                        window_size=param5[0], limit=param5[1], offset=param5[2],
                                                        pairs=param5[3]))]

        def check(self, reply: str, clue: Any) -> CheckResult:
            reply = reply.strip()
            if not clue and reply:
                return CheckResult.wrong("The output should be empty if the word doesn't exist in the database, \n"
                                         "or if the limit is equal to zero.\n"
                                         "However, your output does not seem to be empty.")
            for key in clue:
                expected_key = os.path.split(key)[-1]
                if key not in reply:
                    return CheckResult.wrong("Seems like one of the documents is missing.\n"
                                             f"The documents \"{expected_key}\" was not found in your output.")
                expected_output = expected_key + '\n' + clue[key]
                if expected_output not in reply:
                    return CheckResult.wrong(f"For the document \"{key}\" the following search results were expected:\n"
                                             f"\"{expected_output}\"\n"
                                             f"However, it was not found in your output. ")

            return CheckResult.correct()


    if __name__ == '__main__':
        SearchTest().run_tests()
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
feedback_link: https://hyperskill.org/projects/168/stages/875/implement#comment
status: Unchecked
record: -1
