type: edu
files:
- name: game.py
  visible: true
  text: |
    # write your code here
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from random import choice
    from re import search
    from hstest import StageTest, CheckResult, dynamic_test, TestedProgram


    class TextBasedAdventureGameTest(StageTest):
        username = "new_user"
        name = "john"
        species = "human"
        gender = "male"
        snack = "apple"
        weapon = "sword"
        tool = "rope"
        difficulty = "easy"
        lives = "5"
        picked_choice = ""

        @dynamic_test
        def test1(self):
            main = TestedProgram()
            output = main.start()
            return self.check_welcome(output)

        @dynamic_test
        def test2(self):
            main = TestedProgram()
            main.start()

            if main.is_waiting_input():
                output = main.execute("1")
                feedback = "Your program couldn't process input '1' to start a new game! Make sure to output 'Starting a new game...'."
                return self.check_start_new(output, feedback)
            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test3(self):
            main = TestedProgram()
            main.start()

            if main.is_waiting_input():
                output = main.execute("start")
                feedback = "Your program couldn't process the input 'start' to start a new game! Make sure to output 'Starting a new game...'."
                return self.check_start_new(output, feedback)
            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test4(self):
            main = TestedProgram()
            main.start()

            if main.is_waiting_input():
                output = main.execute("StARt")
                feedback = "Your program shouldn't be case sensitive when starting a new game!"
                return self.check_start_new(output, feedback)
            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test5(self):
            main = TestedProgram()
            main.start()

            if main.is_waiting_input():
                output = main.execute("2")
                feedback = "Your program couldn't process input '2' to load a game! Make sure to say 'No save data found!'."
                return self.check_start_load(output, feedback)
            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test6(self):
            main = TestedProgram()
            main.start()

            if main.is_waiting_input():
                output = main.execute("load")
                feedback = "Your program couldn't process input 'load' to load a game! Make sure to say 'No save data found!'."
                return self.check_start_load(output, feedback)
            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test7(self):
            main = TestedProgram()
            main.start()

            if main.is_waiting_input():
                output = main.execute("lOAd")
                feedback = "Your program shouldn't be case sensitive when loading a game!."
                return self.check_start_load(output, feedback)
            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test8(self):
            main = TestedProgram()
            main.start()

            if main.is_waiting_input():
                output = main.execute("5")
                if main.is_waiting_input():
                    return self.check_unknown(output)
                return CheckResult.wrong("Your program didn't ask for another input after an unknown input!")
            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test9(self):
            main = TestedProgram()
            main.start()

            if main.is_waiting_input():
                output = main.execute("3")
                if main.is_finished():
                    feedback = "Your program didn't output 'Goodbye!' before you exit with '3' as input!"
                    return self.check_quit(output, feedback)
                return CheckResult.wrong("Your program should end with input '3'!")
            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test10(self):
            main = TestedProgram()
            main.start()

            if main.is_waiting_input():
                output = main.execute("quIt")
                if main.is_finished():
                    feedback = "Your program didn't output 'Goodbye!' before you exit with 'quIt' as input! Your program must be case insensitive!"
                    return self.check_quit(output, feedback)
                return CheckResult.wrong(
                    "Your program should end with input 'quIt'! Your program must be case insensitive!")
            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test11(self):
            main = TestedProgram()
            main.start()

            if main.is_waiting_input():
                output = main.execute("quit")
                if main.is_finished():
                    feedback = "Your program didn't output 'Goodbye!' before you exit with 'quit' as input!"
                    return self.check_quit(output, feedback)
                return CheckResult.wrong("Your program should end with input 'quit'!")
            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test12(self):
            main = TestedProgram()
            main.start()
            output = main.execute("1")

            if "/b" not in output.lower():
                return CheckResult.wrong("Show the user that they can enter '/b' to go back!")
            elif "enter a user name" not in output.lower():
                return CheckResult.wrong("Tell the user to 'Enter a user name'!")

            if main.is_waiting_input():
                output = main.execute("/b").lower()

                if "create your character" in output:
                    return CheckResult.wrong(
                        "You didn't process the right command for going back which is '/b'!")

                if "going back to menu" not in output:
                    return CheckResult.wrong(
                        "You didn't output the correct message when going back to menu. Make sure the output contains 'Going back to menu...'")

                if not main.is_waiting_input():
                    return CheckResult.wrong("Your program should continue working in the main menu")

                return self.check_welcome(output, feedback="You should output the same welcome message with the menu!")

            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test13(self):
            main = TestedProgram()
            main.start()
            if main.is_waiting_input():
                main.execute("1")
                if main.is_waiting_input():
                    output = main.execute(self.username).lower()
                    if "create your character" not in output:
                        return CheckResult.wrong("You should print 'Create your character:'!")
                    elif "name" not in output and main.is_waiting_input():
                        return CheckResult.wrong("You should ask the name of the character!")
                    output = main.execute(self.name).lower()
                    if "species" not in output and main.is_waiting_input():
                        return CheckResult.wrong("You should ask the species of the character!")
                    output = main.execute(self.species).lower()
                    if "gender" not in output and main.is_waiting_input():
                        return CheckResult.wrong("You should ask the gender of the character!")
                    output = main.execute(self.gender).lower()
                    if "pack your bag" not in output:
                        return CheckResult.wrong("You should print 'Pack your bag for the journey:'!")
                    elif "snack" not in output and main.is_waiting_input():
                        return CheckResult.wrong("You should ask for the favourite snack for the inventory!")
                    output = main.execute(self.snack).lower()
                    if "weapon" not in output and main.is_waiting_input():
                        return CheckResult.wrong("You should ask for a weapon for the inventory!")
                    output = main.execute(self.weapon).lower()
                    if "tool" not in output and main.is_waiting_input():
                        return CheckResult.wrong("You should ask for a traversal tool for the inventory!")
                    output = main.execute(self.tool).lower()
                    difficulties = ["easy", "hard", "medium"]
                    have_difficulty = all([difficulty in output for difficulty in difficulties])
                    if "choose your difficulty" not in output:
                        return CheckResult.wrong("You should print 'Choose your difficulty:'!")
                    elif not have_difficulty and main.is_waiting_input():
                        return CheckResult.wrong("You should print all the difficulty options!")
                    output = main.execute("insane").lower()
                    if "unknown input! please enter a valid one" not in output and main.is_waiting_input():
                        return CheckResult.wrong(
                            "Your program should handle unknown input like before here! Make sure to say 'Unknown input! Please enter a valid one'. ")
                    output = main.execute(self.difficulty).lower()
                    if "unknown input! please enter a valid one" in output and main.is_waiting_input():
                        return CheckResult.wrong(
                            "The user should be able to type the difficulty or enter the number of the difficulty!")
                    elif "good luck on your journey" not in output:
                        return CheckResult.wrong("You should print 'Good luck on your journey!'")
                    elif "your character" not in output:
                        return CheckResult.wrong("You should print 'Your character:' before the character traits.")
                    elif self.name not in output:
                        return CheckResult.wrong("You should print the name of the character.")
                    elif self.species not in output:
                        return CheckResult.wrong("You should print the  gender of the character.")
                    elif self.gender not in output:
                        return CheckResult.wrong("You should print the gender of the character.")
                    elif "your inventory" not in output:
                        return CheckResult.wrong("You should print 'Your inventory:' before the inventory items.")
                    elif self.snack not in output:
                        return CheckResult.wrong("You should print the snack from the inventory.")
                    elif self.weapon not in output:
                        return CheckResult.wrong("You should print the weapon from the inventory.")
                    elif self.tool not in output:
                        return CheckResult.wrong("You should print the tool from the inventory.")
                    elif "difficulty" not in output:
                        return CheckResult.wrong("You should print 'Difficulty:' before the difficulty.")
                    elif self.difficulty not in output:
                        return CheckResult.wrong("You should print the difficulty.")
                    return CheckResult.correct()

                return CheckResult.wrong("Your program didn't ask for the user name!")
            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test14(self):

            main = TestedProgram()
            main.start()
            if main.is_waiting_input():
                main.execute("1")
                main.execute(self.username)
                main.execute(self.name)
                main.execute(self.species)
                main.execute(self.gender)
                main.execute(self.snack)
                main.execute(self.weapon)
                main.execute(self.tool)
                output = main.execute(self.difficulty)
                if "what will you do? type the number of the option or type '/h' to show help" not in output.lower():
                    return CheckResult.wrong(
                        "You should show the actions  with this message: 'What will you do? Type the number of the option or type '/h' to show help.' ")
                elif "1-" not in output or "2-" not in output or "3-" not in output:
                    return CheckResult.wrong("You should number the options: '1-', so that the player can easily type it!")
                while True:
                    choices = ["1", "2", "3"]
                    random_choice = choice(choices)
                    if search("({.*)|(\(.*\))", output.lower()):
                        return CheckResult.wrong(
                            "Words wrapped in brackets were found in your output: '{},()'. These words with brackets are not part of story! ")
                    # add an extra condition here to prevent just printing these below and passing!!!!!!!!!
                    if "level 2" in output.lower() and main.is_finished() and "goodbye" in output.lower():
                        return CheckResult.correct()
                    elif "game over" in output.lower() and "***welcome" in output.lower() and main.is_waiting_input():
                        main.execute("start")
                        main.execute(self.username)
                        main.execute(self.name)
                        main.execute(self.species)
                        main.execute(self.gender)
                        main.execute(self.snack)
                        main.execute(self.weapon)
                        main.execute(self.tool)
                        main.execute(self.difficulty)

                    # not working, can't stop infinite loop!!
                    if "level 2" in output.lower() and not main.is_finished() and "goodbye" in output.lower():
                        return CheckResult.wrong(
                            "You should end the program directly after reaching level 2 for this stage!")
                    elif "level 2" in output.lower() and "goodbye" not in output.lower():
                        return CheckResult.wrong("You should output 'Goodbye!' before ending the program!")

                    if "game over" in output.lower() and main.is_finished():
                        return CheckResult.wrong(
                            "Your program should not end after game over! It should return back to menu.")
                    elif "game over" in output.lower() and "***welcome" not in output.lower():
                        return CheckResult.wrong(
                            "You should print the welcome message with the menu again after game over!")
                    elif "game over" in output.lower() and not main.is_waiting_input():
                        return CheckResult.wrong("Your program should wait for an input in the menu after game over!")

                    if "you died" in output.lower() and "level 1" not in output.lower() and "game over" not in output.lower():
                        return CheckResult.wrong(
                            "Your program didn't start from the beginning of the level. Make sure you output the number of the level: 'Level 1' ")

                    if "what will you do? type the number of the option or type '/h' to show help" not in output.lower():
                        choices.pop(choices.index(self.picked_choice))
                        self.picked_choice = choice(choices)
                        output = main.execute(self.picked_choice)

                    else:
                        self.picked_choice = random_choice
                        output = main.execute(self.picked_choice)

            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test15(self):
            main = TestedProgram()
            main.start()

            if main.is_waiting_input():
                main.execute("1")
                main.execute(self.username)
                main.execute(self.name)
                main.execute(self.species)
                main.execute(self.gender)
                main.execute(self.snack)
                main.execute(self.weapon)
                main.execute(self.tool)
                main.execute(self.difficulty)
                output = main.execute("/h")
                return self.check_help(output)

            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test16(self):
            main = TestedProgram()
            main.start()

            if main.is_waiting_input():
                main.execute("1")
                main.execute(self.username)
                main.execute(self.name)
                main.execute(self.species)
                main.execute(self.gender)
                main.execute(self.snack)
                main.execute(self.weapon)
                main.execute(self.tool)
                main.execute(self.difficulty)
                output = main.execute("/i")
                return self.check_inventory(output)

            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test17(self):
            main = TestedProgram()
            main.start()

            if main.is_waiting_input():
                main.execute("1")
                main.execute(self.username)
                main.execute(self.name)
                main.execute(self.species)
                main.execute(self.gender)
                main.execute(self.snack)
                main.execute(self.weapon)
                main.execute(self.tool)
                main.execute(self.difficulty)
                output = main.execute("/c")
                return self.check_char(output)

            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test18(self):
            main = TestedProgram()
            main.start()

            if main.is_waiting_input():
                main.execute("1")
                main.execute(self.username)
                main.execute(self.name)
                main.execute(self.species)
                main.execute(self.gender)
                main.execute(self.snack)
                main.execute(self.weapon)
                main.execute(self.tool)
                main.execute(self.difficulty)
                output = main.execute("/q")

                if main.is_waiting_input():
                    if "you sure you want to quit the game? y/n" not in output.lower() or "unknown input! please enter a valid one" in output.lower():
                        return CheckResult.wrong(
                            "You didn't ask to quit the game! Make sure you output: 'You sure you want to quit the game? Y/N'")
                    output = main.execute("n")
                    if "goodbye!" in output.lower() or main.is_finished():
                        return CheckResult.wrong(
                            "If the player chooses not to quit, you should resume the game! Make sure your program is not case sensitive!")
                    main.execute("/q")
                    output = main.execute("y")
                    if "goodbye!" not in output.lower():
                        return CheckResult.wrong(
                            "Your didn't output: 'Goodbye!' before stopping the program! Make sure your program is not case sensitive!")
                    elif main.is_finished():
                        return CheckResult.correct()
                return CheckResult.wrong("You didn't ask to quit the game!")

            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test19(self):
            main = TestedProgram()
            main.start()

            if main.is_waiting_input():
                main.execute("1")
                main.execute(self.username)
                main.execute(self.name)
                main.execute(self.species)
                main.execute(self.gender)
                main.execute(self.snack)
                main.execute(self.weapon)
                main.execute(self.tool)
                main.execute(self.difficulty)
                output = main.execute("5")
                if "unknown input! please enter a valid one" not in output.lower() or not main.is_waiting_input():
                    return CheckResult.wrong(
                        "Your program couldn't process unknown input. Make sure to say 'Unknown input! Please enter a valid one' .")
                return CheckResult.correct()
            return CheckResult.wrong("Your program didn't ask for input!")

        @dynamic_test
        def test20(self):
            main = TestedProgram()
            main.start()
            return self.check_save()

        def check_welcome(self, output, feedback=""):
            if "welcome to" in output.lower() and "***" in output:
                return CheckResult.correct()
            return CheckResult.wrong(
                feedback or "Your welcome message doesn't include the following: ***Welcome to <game-title>***' !")

        def check_start_new(self, output, feedback):
            if "starting a new game" in output.lower():
                return CheckResult.correct()
            return CheckResult.wrong(feedback)

        def check_start_load(self, output, feedback):
            if "no save data found" in output.lower():
                return CheckResult.correct()
            return CheckResult.wrong(feedback)

        def check_unknown(self, output):
            if "unknown input! please enter a valid one" in output.lower():
                return CheckResult.correct()
            return CheckResult.wrong(
                "Your program couldn't process unknown input. Make sure to say 'Unknown input! Please enter a valid one'. ")

        def check_quit(self, output, feedback):
            if "goodbye" in output.lower():
                return CheckResult.correct()
            return CheckResult.wrong(feedback)

        def check_help(self, output):
            message = "type the number of the option you want to choose.\n" + "commands you can use:\n/i => shows inventory.\n" \
                      + "/q => exits the game.\n" + "/c => shows the character traits.\n" + "/h => shows help."
            if message in output.lower():
                return CheckResult.correct()

            else:
                return CheckResult.wrong(
                    "Your program didn't output the correct help message. Make sure to output:\n'" + message + "'")

        def check_inventory(self, output):
            inventory = [self.snack, self.weapon, self.tool]
            in_inventory = all([item in output.lower() for item in inventory])

            if "inventory" not in output.lower():
                return CheckResult.wrong("Your program didn't output the title: 'Inventory:'")
            elif inventory[0] not in output.lower():
                return CheckResult.wrong("The snack is missing from the inventory!")
            elif inventory[1] not in output.lower():
                return CheckResult.wrong("The weapon is missing from the inventory!")
            elif inventory[2] not in output.lower():
                return CheckResult.wrong("The tool is missing from the inventory!")
            elif not in_inventory:
                return CheckResult.wrong("The inventory is empty!")
            else:
                return CheckResult.correct()

        def check_char(self, output):
            char = [self.name, self.species, self.gender, self.lives]
            in_char = all([ch in output.lower() for ch in char])

            if "character" not in output.lower():
                return CheckResult.wrong("Your program didn't output the title: 'Your character:'")
            elif "lives remaining" not in output.lower():
                return CheckResult.wrong("Your program didn't output the title: 'Lives remaining:'")
            elif char[0] not in output.lower():
                return CheckResult.wrong("The name is missing from the character traits!")
            elif char[1] not in output.lower():
                return CheckResult.wrong("The species is missing from the character traits!")
            elif char[2] not in output.lower():
                return CheckResult.wrong("The gender is missing from the character traits!")
            elif char[3] not in output.lower():
                return CheckResult.wrong("The life count is missing from remaining lives!")
            elif not in_char:
                return CheckResult.wrong("The character traits are empty!")
            else:
                return CheckResult.correct()

        def check_save(self):
            try:
                with open(f"./game/saves/{self.username}.txt") as f:
                    content = f.readlines()
                    character = content[0].lower().strip().split(", ")
                    inventory = content[1].lower().strip().split(", ")
                    difficulty = content[2].lower().strip().split(" ")
                    level = content[3].strip()

                    if len(character) != 3 or self.name not in character:
                        return CheckResult.wrong("Save file doesn't contain the correct name of the character: " + self.name.title())
                    elif len(character) != 3 or self.species not in character:
                        return CheckResult.wrong("Save file doesn't contain the correct species of the character: " + self.species.title())
                    elif len(character) != 3 or self.gender not in character:
                        return CheckResult.wrong("Save file doesn't contain the correct gender of the character: " + self.gender.title())
                    elif len(inventory) != 3 or self.snack not in inventory:
                        return CheckResult.wrong("Save file doesn't contain the correct snack in the inventory: " + self.snack.title())
                    elif len(inventory) != 3 or self.weapon not in inventory:
                        return CheckResult.wrong("Save file doesn't contain the correct weapon in the inventory: " + self.weapon.title())
                    elif len(inventory) != 3 or self.tool not in inventory:
                        return CheckResult.wrong("Save file doesn't contain the correct tool in the inventory: " + self.tool.title())
                    elif len(difficulty) != 2 and self.difficulty not in difficulty:
                        return CheckResult.wrong("Save file doesn't contain the correct difficulty: " + self.difficulty.title())
                    elif len(difficulty) != 2 and self.difficulty in difficulty:
                        return CheckResult.wrong("Save file doesn't contain any life count.")
                    elif level != "2":
                        return CheckResult.wrong("Save file doesn't contain the correct level count: 2")
                    else:
                        return CheckResult.correct()

            except (TypeError, IndexError, FileNotFoundError):
                return CheckResult.wrong("Save file doesn't exist with the given player name.")



        # def check_level1(self, output):
        #     choices = ["1", "2", "3"]
        #     random_choice = choice(choices)
        #     if "level 2" in output.lower():
        #         return CheckResult.correct()
        #     elif "game over" in output.lower():
        #         return "1"
        #     elif "starting a new game" in output.lower():
        #         return self.username
        #     elif "1- name" in output.lower():
        #         return self.name
        #     elif "2- species" in output.lower():
        #         return self.species
        #     elif "3- gender" in output.lower():
        #         return self.gender
        #     elif "1- favourite snack" in output.lower():
        #         return self.snack
        #     elif "2- a weapon for the journey" in output.lower():
        #         return self.weapon
        #     elif "3- a traversal tool" in output.lower():
        #         return self.tool
        #     elif "choose your difficulty" in output.lower():
        #         return self.difficulty
        #
        #     if "you died" in output.lower() and "level 1" not in output.lower():
        #         return CheckResult.wrong("Your program didn't start from the beginning of the level.")
        #
        #     if "what will you do? type the number of the option or type '/h' to show help." not in output.lower():
        #         choices.pop(choices.index(self.picked_choice))
        #         self.picked_choice = choice(choices)
        #         return self.picked_choice
        #
        #     else:
        #         self.picked_choice = random_choice
        #         return self.picked_choice


    if __name__ == '__main__':
        TextBasedAdventureGameTest('game.game').run_tests()
  learner_created: false
- name: story.txt
  visible: true
  text: |
    Level 1
    +
    Once you reach the beginning of the Mount Qaf, you feel amazed by the majestic
    mountain that you will conquer, at the end of this climb. You look at the snowy peaks while
    thinking of how to start the journey. There is a hill before you.
    +
    As you go up the mountain, you see weird plants and flowers coming out of the surface of the mountain.
    Suddenly, you hear a thunder-like growl and feel the breeze of giant wings behind you.
    You tilt your head up and see a dragon flying towards the top of the mountain.
    You've heard stories that this, is no ordinary mountain and they seem to be true.
    You've reached a higher level of the mountain and saw a door with a lock, hanging in the air, unattached.
    You also saw a path up to the mountain however; there is a human-sized bird in front of it.
    +
    Once again, you have climbed up on the mountain.
    The air started to feel heavier. A cold breeze crawled up on your neck as it was snowing.
    You hugged your arms around your chest, wishing to pack a thicker jacket.
    In the distance, you saw a cave and filled with hope to get in and get warm.
    The cave's entrance small, however, the inside was vast, filled with icicles on the ceiling.
    You sat down on a rock trying to get warm and all of a sudden you felt as if you weren't alone.
    You stand still to listen to hear its breathing. Then you hear a big laugh echoing on the surface of the cave.
    Darkness says "There come many travellers here to conquer this mountain, however very few can pass this point".
    You were too scared to answer. The voice continued "Answer my riddle correctly and I'll let you pass, it's that simple!
    As small as your thumb, I am light in the air,
    you may hear me before you see me, but trust that I'm there.
    What am I?"
    +
    Level 2
    +
    You woke up the next day, feeling rested.
    As you walk out of the cave, the sunlight shines to your eyes.
    You can see the peak of the mountain better now.
    While you admire the view from up there, you see a horse-sized dragon flying towards you.
    It lands in front of you and starts growling at you, snorting grey smokes from its nose.
    +
    When you have done with the dragon, you move along on your path to the peak of the mountain.
    On the way up, you see a hooded figure on the side of the road.
    You feel curious to check it out and carefully approach the hooded figure.
    As you get closer, you notice that there is no one wearing the hood.
    The hood floats in the air freely. There comes a voice from somewhere around the hood.
    It says "Are you surprised to see that I'm not worn by anyone! Huh? Typical human".
    "Anyway, I'm glad you came here because I've got a brilliant offer for you".
    "I can give you these chests but you can only get one of them. So, choose wisely!".
    It reveals two identical chests hiding behind. One on the right and one on the left.
    +
    Finally, you reach the top of the mountain. You feel like a true hero!
    You see a chest filled with gold and a big red rock behind it.
    As you get closer, you notice that this rock is moving.
    You stop walking because this rock is the giant dragon that you saw from before.
    The dragon sees you, waiting to attack.
  learner_created: true
- name: as.txt
  visible: true
  learner_created: true
- name: choices.txt
  visible: true
  text: |
    Walk around a bit, maybe you'll find something interesting.
    Walk up the hill and begin climbing.
    Enjoy the scenery.
    Walk up to the unattached door. You wonder where it leads, can you trust it?
    Examine the strange bird from afar.
    Walk towards the path and face the bird.
    A hummingbird.
    A mosquito.
    A bumblebee.
    Take a step closer and examine the creature.
    It looks dangerous, attack with your {weapon}
    Maybe you can give something and pet the dragon.
    Choose the one on the left.
    Choose the one on the right.
    Don't trust this thing and move on.
    You try to runaway to where you came from.
    You think you can fight the dragon and take out your {weapon}
    You wait for a miracle to happen...
  learner_created: true
- name: new_user.txt
  visible: true
  learner_created: true
- name: w.txt
  visible: true
  learner_created: true
- name: outcomes.txt
  visible: true
  text: |
    You found a key. (inventory+'key' and move)
    *
    You go up the mountain, using the {tool}  (move)
    *
    You admired the majestic view of the mountain! (repeat)
    *
    You tried the key on the lock and the door opened. (inventory-'key' and move option1)
    *
    You don't have a key to open the lock. (repeat option2)
    *
    The bird has red wings with blue stripes on. It has a long neck.
    Inside its beak it has sharp teeth and its eyes are following you, interested. (repeat)
    *
    You take out your weapon and attack the bird.
    It stretches its head to attack you. It's too fast... (life-1)
    *
    The voice says 'Too bad, I thought you were clever!' as it gets closer to you.
    You see a shape like gorilla for a second and you can't even make a peep... (life-1)
    *
    The darkness says 'Wrong!'. You try to run but it catches you from your legs and drags you to darkness... (life-1)
    *
    The darkness says 'Correct! You may pass traveller.'
    You saw a light coming from the inner cave and you follow it. (move and save)
    *
    The dragon smacks its lips and shows its tongue. It looks hungry. (repeat)
    *
    You get closer to the dragon slowly and with one swift blow, it's dead. (move)
    *
    You take out your snack from your bag and give it to the dragon.
    The dragon loves it and flies away happily. (inventory-'snack' and move)
    *
    You open the chest on the left. You found an extra life! (life+1)
    *
    You open the chest on the right but the chest is empty.
    You try to look inside closely but something pushes you inside the chest.
    The chest close itself. (life-1)
    *
    The hood disappears without a trace as you walk away from it. (move)
    *
    The dragon shoots flame to your way and burn you! (life-1)
    *
    The dragon crushes you with its tail, you don't even see it coming... (life-1)
    *
    The smaller dragon from before appear behind the mother and flies to you, showing affection for you.
    You pet its head and the mother dragon looks happy about this. (game_won option1)
    *
    Nothing happens. The dragon moves its wings and the wind knocks you off from the mountain... (life-1 option2)
  learner_created: true
- name: saves/new_user.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/161/stages/837/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #20

    Save file doesn't exist with the given player name.

    Please find below the output of your program during this failed test.

    ---

    ***Welcome to the Journey to Mount Qaf***

    1- Press key '1' or type 'start' to start a new game
    2- Press key '2' or type 'load' to load your progress
    3- Press key '3' or type 'quit' to quit the game
  time: Mon, 05 Apr 2021 02:14:25 UTC
record: -1
