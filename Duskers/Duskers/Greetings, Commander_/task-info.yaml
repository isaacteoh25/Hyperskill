type: edu
custom_name: Greetings, Commander!
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult

    usernames = "hyper", "hyper_test", "hyper_user"


    class DuskersTest(StageTest):
        test = 0

        def generate(self):
            return [TestCase(stdin=f"play\n{usernames[0]}\nyes"),
                    TestCase(stdin=f"PLAY\n{usernames[1]}\nNO\nno\nYes"),
                    TestCase(stdin="exit")]

        def check(self, reply, attach):
            if "\n" not in reply:
                return CheckResult.wrong("Output too short")
            user_output = reply.split("\n")
            # you should check if there is any output here, since it might be just an empty list
            text = "".join(user_output)
            if len(user_output) < 10:
                return CheckResult.wrong(
                    "Output too short. Your title should take up exactly 8 lines (including blank space),\n"
                    "then the main menu options should be displayed on separate lines")
            if "play" not in user_output[8].lower():
                # here you should check if the output has index 8 -- it might throw an IndexError and break the whole code
                return CheckResult.wrong(
                    "Play option should be right underneath the title, which should take up exactly 8 lines.")
            if "exit" not in user_output[9].lower():
                # the same is true here
                return CheckResult.wrong("Exit option should be right under [Play].")
            if self.test in (0, 1):
                if usernames[self.test] not in "".join(user_output):
                    return CheckResult.wrong("Player not greeted personally.")
            if self.test == 0:
                if text.lower().count("yes") != 1:
                    return CheckResult.wrong(
                        "Player not asked if he/she is ready to begin.\nRemember to display possible commands for player to choose from")
            if self.test == 1:
                if "yes" not in text.lower():
                    return CheckResult.wrong(
                        "Player not asked if he/she is ready to begin.\nRemember to display possible commands for player to choose from")
                if text.lower().count("yes") != 3:
                    return CheckResult.wrong("You must keep asking the player if they are ready until they choose [Yes]")
            self.test += 1
            return CheckResult.correct()


    if __name__ == '__main__':
        DuskersTest('duskers.duskers').run_tests()
  learner_created: false
- name: duskers/duskers.py
  visible: true
  text: |
    # Write your code here
  learner_created: false
feedback_link: https://hyperskill.org/projects/136/stages/724/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 01 Mar 2021 08:15:11 UTC
record: 1
