type: edu
custom_name: stage7
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase


    class CalcTest(StageTest):
        on_exit = False

        def generate(self) -> List[TestCase]:
            return [TestCase(stdin=['/help', self.test_1_1, self.test_1_2, self.test_1_3, self.test_1_4, self.test_1_5,
                                    self.test_1_6, self.test_1_7, self.test_1_9, self.test_1_10, self.test_1_11,
                                    self.test_1_12, self.test_1_13]),
                    TestCase(stdin=['variable = 777 \n Variable', self.test_2_1,
                                    self.test_2_2, self.test_2_3, self.test_2_4]),
                    TestCase(stdin=['8 * (2 + 3', self.test_3_1, self.test_3_2, self.test_3_3, self.test_3_4])]

        # test of previous steps' functionality ####################################
        # help message test
        def test_1_1(self, output):
            output = str(output).lower().strip()
            if len(output.split(" ")) < 1:
                return CheckResult.wrong("It seems like there was no any \"help\" message.")
            return ""

        # empty string test
        def test_1_2(self, output):
            output = str(output)
            if len(output) != 0:
                return CheckResult.wrong("Incorrect response to an empty string. "
                                         "The program should not print anything.")
            return "n = 32"

        # assignment test
        def test_1_3(self, output):
            if len(output) != 0:
                return CheckResult.wrong("Unexpected reaction after assignment." +
                                         "The program should not print anything in this case.")
            return "33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4"

        # addition and subtraction test
        def test_1_4(self, output):
            output = str(output).lower().strip()
            if output != "-3":
                return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.")
            return "33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4"

        # addition and subtraction with variables
        def test_1_5(self, output):
            output = str(output).lower().strip()
            if output != "-3":
                return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.")
            return "c = n \nc = 2"

        # assignment by a variable and reassignment
        def test_1_6(self, output):
            if len(output) != 0:
                return CheckResult.wrong("Unexpected reaction after assignment."
                                         "The program should not print anything in this case.")
            return "  c   "

        # checking the value of variable
        def test_1_7(self, output):
            output = str(output).lower().strip()
            if output != "2":
                return CheckResult.wrong("The variable stores not a correct value."
                                         "May be the program could not assign the value of one variable to another one.")
            return "11 - 13 + c"

        # def test_8(self, output):
        #     output = str(output).lower().strip()
        #     if output != "0":
        #         return CheckResult.wrong("The problem when sum is equal to 0 has occurred.")
        #     return "5 --- 2 ++++++ 4 -- 2 ---- 1"  output = 10
        # multiple operations with several operators

        # zero sum test
        def test_1_9(self, output):
            output = str(output).lower().strip()
            if output != "0":
                return CheckResult.wrong("The program cannot process multiple operations with several operators.")
            return "/start"

        # nonexistent command
        def test_1_10(self, output):
            output = str(output).lower().strip()
            if "unknown" not in output:
                return CheckResult.wrong("The program should print \"Unknown command\" "
                                         "when a nonexistent command is entered.")
            return "var1 = 1"

        # invalid name of variable
        def test_1_11(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("The value can be an integer number or a value of another variable")
            return "c = 7 - 1 = 5"

        # invalid assignment
        def test_1_12(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("The program could not handle a invalid assignment.")
            return "variable = f"

        # assignment by unassigned variable
        def test_1_13(self, output):
            output = str(output).lower().strip()
            if "unknown" not in output and "invalid" not in output:
                return CheckResult.wrong("The program should not allow an assignment by unassigned variable.")
            self.on_exit = True
            return "/exit"

        # a test suit for the current stage ########################################
        # test of case sensitivity
        def test_2_1(self, output):
            output = str(output).lower().strip()
            if "unknown" not in output:
                return CheckResult.wrong("The program should be case sensitive.")
            return "4 * 3"

        # multiplication operation test
        def test_2_2(self, output):
            output = str(output).lower().strip()
            if output != "12":
                return CheckResult.wrong("The program has problems with multiplication operation.")
            return "91 / 13"

        # division operation test
        def test_2_3(self, output):
            output = str(output).lower().strip()
            if output != "7" and output != "7.0":
                return CheckResult.wrong("The program has problems with division operation.")
            return " a = 7 \n b = 2\na * 4 / b - (3 - 1)"

        # mixed operations
        def test_2_4(self, output):
            output = str(output).lower().strip()
            if output != "12":
                return CheckResult.wrong("The program cannot correctly process several operations.")
            self.on_exit = 1
            return "/exit"

        # test of an example from the task
        # def test_2_5(self, output):
        #     output = str(output).lower().strip()
        #     if output != "155":
        #         return CheckResult.wrong("The program cannot reproduce an example from the task.")
        #     return "3 + (9 + ( 68 * 3/9)) * ((7-2 * 5) / 2) * 6"
        #     output: -282 input: "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)"

        # test of multi-level parentheses
        # def test_2_6(self, output):
        #     output = str(output).replace(".", " ").split()[0].strip()
        #     if output != "-282":
        #         return CheckResult.wrong("Program incorrectly solves expressions with multi-level parentheses")
        #     self.on_exit = True
        #     return "/exit"

        # negative tests for this stage ############################################
        # unclosed brackets from the right
        def test_3_1(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("The program could not handle an invalid expression.")
            return "4 + 5)"

        # unclosed brackets from the left
        def test_3_2(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("The program could not handle an invalid expression.")
            return "2 ************ 2"

        # sequence of "*"
        def test_3_3(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("A sequence of \"*\" should return \"Invalid expression\".")
            return "2 // 2"

        # sequence of "/"
        def test_3_4(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("A sequence of \"/\" should return \"Invalid expression\".")
            self.on_exit = True
            return "/exit"

        def check(self, reply: str, attach) -> CheckResult:
            if self.on_exit:
                reply = reply.strip().lower().split('\n')
                self.on_exit = False
                if 'bye' not in reply[-1]:
                    return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".")
                else:
                    return CheckResult.correct()
            else:
                return CheckResult.wrong("The program ended prematurely")


    if __name__ == '__main__':
        CalcTest("calculator.calculator").run_tests()
  learner_created: false
- name: calculator/calculator.py
  visible: true
  text: |+
    def add(a, b):
        return a + b


    def subtract(a, b):
        return a - b


    def evaluate_operator(string):
        if string != len(string) * string[0]:
            return False
        if '-' in string and len(string) % 2 != 0:
            return '-'
        return '+'


    def validate_commands(string):
        commands = ['/help', '/exit']
        if string == '':
            return False
        if string.startswith('/') and string not in commands:
            print('Unknown command')
            return False
        return True

    def validate_expression_components(ops, numbers):
        if len(ops) == 0 and len(numbers) > 1:
            print('Invalid expression')
            return False
        for op in ops:
            if op is False:
                print('Invalid expression')
                return False
        return True

    def validate_variable(expression):
        if len(expression) == 1:
            if expression[0].isalpha():
                return True
            print('Invalid identifier')
            return None
        return False


    def validate_assignment(expression):
        global variable
        try:
            left_side = expression[0]
            right_side = expression[2]
            if expression[1] == '=': # it is an assignment expression
                if (len(expression) == 3):
                    if left_side.isalpha(): # left side a valid variable
                        variable = variables.get(right_side)
                    if right_side.isnumeric(): # right side is a value
                        variables[left_side] = right_side
                        return True
                    elif right_side.isalpha() and variable: # right side is a variable with only letters
                        variables[left_side] = variable
                        return True
                    elif variable is None:
                        print('Invalid assignment')  # if the variable in the right side is not assigned before
                    else:
                        print('Invalid assignment')  # if the value to be assigned to the variable has a letter and number
                    return None

                else:
                    print('Invalid identifier') # if the variable to be assigned to contains numeric digits
                    return None
            else:
                print('Invalid assignment')  # if the assignment expression is not valid/ not 3 units long
                return None
            return False
        except:
            return False



    variables = dict()
    variables = dict()
    while True:
        continue_flag = False
        user_input = input().strip()
        if not validate_commands(user_input):
            continue
        if user_input == '/help':
            print('The program can add and subtract numbers, and assign values to variables')
            continue
        if user_input == '/exit':
            print('Bye!')
            break
        nums = list()
        operators = list()

        if user_input.find('=') != -1:
            expression = user_input.split('=')
            expression.insert(1, '=')
            expression[0] = expression[0].strip()
            expression[2] = expression[2].strip()
        else:
            expression = user_input.split()

        # if only a variable is there
        is_variable = validate_variable(expression)
        if is_variable:
            key = expression[0]
            value = variables.get(key)
            if value is None:
                print('Unknown variable')
            else:
                print(value)
            continue
        elif is_variable is None:
            continue
            # item assignment rules
        assignment_check = validate_assignment(expression)
        if assignment_check is None or assignment_check:
            # Error occured during assignment or expression is an assignment then go back to first of loop
            continue

        # arithmetic stuff
        for item in expression:
            if item in ['+', '-']:
                operators.append(evaluate_operator(item))
                continue
            elif item.isalpha():  # checks if it is a variable that is composed of only letters
                item = variables.get(item, False)
                if not item:
                    print('Unknown variable')
                    continue_flag = True
                    break
            elif not item.isnumeric():  # checks if it is not a number either
                print('Invalid identifier')
                continue_flag = True
                break
            nums.append(int(item))
        if continue_flag:
            continue
        nums.reverse()
        operators.reverse()
        if validate_expression_components(operators, nums) is False:
            continue
        while len(nums) != 1:
            num_1 = nums.pop()
            num_2 = nums.pop()
            operator = operators.pop()
            if operator == '-':
                nums.append(subtract(num_1, num_2))
            if operator == '+':
                nums.append(add(num_1, num_2))
        print(nums[0])





  learner_created: false
feedback_link: https://hyperskill.org/projects/74/stages/415/implement
status: Solved
record: 2
