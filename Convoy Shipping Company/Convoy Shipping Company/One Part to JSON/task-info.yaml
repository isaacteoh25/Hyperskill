type: edu
custom_name: One Part to JSON...
files:
- name: convoy/convoy.py
  visible: true
  text: |-
    # Convoy Shipping Company - https://hyperskill.org/projects/151/
    import pandas as pd
    import sqlite3
    from sqlite3 import Error

    class FileHandler:
        def __init__(self):
            self.data = None
            self.checked_data = None
            print("Input file name")

            try:
                self.file_name_complete = input()
                self.file_name = self.file_name_complete.split(sep=".")[0]
                self.file_extension = self.file_name_complete.split(sep=".")[1]
            except IndexError:
                print("You need to put an file extension: .csv or .xlsx")
                self.__init__()

            init_conn = self.create_connection()
            self.create_tables(init_conn)
            self.select_option()
            # self.checked_data = ModifyData.correct_data(self.data, self.file_name)
            for ind in self.checked_data.index:
                # print(self.checked_data['engine_capacity'][ind], self.checked_data ['fuel_consumption'][ind])
                self.insert_into_data(init_conn,self.checked_data['vehicle_id'][ind],self.checked_data['engine_capacity'][ind], self.checked_data ['fuel_consumption'][ind],self.checked_data ['maximum_load'][ind])
            init_conn.close()

        # from sqlite3 import Error
        def create_connection(self):
            """ create a database connection to a database that resides
                in the memory
            """
            connection = None
            try:
                connection = sqlite3.connect(f'./{self.file_name}.s3db')
                return connection
            except Error as e:
                print(e)
                return connection

        def create_tables(self, conn):
            table_data = f"""
            create table if not exists {self.file_name} (
                vehicle_id INTEGER PRIMARY KEY,
                engine_capacity INTEGER NOT NULL UNIQUE
                fuel_consumption INTEGER NOT NULL UNIQUE
                maximum_load INTEGER NOT NULL UNIQUE
            )"""
            try:
                c = conn.cursor()
                c.execute(table_data)
            except Error as e:
                print(e)

        def insert_into_data(self, connection,id, capacity, consumption, load):
            try:
                cursor = connection.cursor()
                # stmt = f"insert into quantity( quantity, recipe_id, measure_id, ingredient_id) values ('{quantity}','{elements}', '{ela}', '{i}')"
                stmt = f"insert into {self.file_name}(vehicle_id, engine_capacity,fuel_consumption,maximum_load) values ('{id}','{capacity}','{consumption}','{load}')"
                # values = [*map(lambda el, e: (None, el, e), elements, ela)]
                cursor.execute(stmt)
                # cursor.executemany(stmt, values)
                connection.commit()
                return cursor
            except Error as e:
                print(e)
                return False

        def select_option(self):
            options = {"xlsx": self.convert_xlsx,
                       "csv": self.read_csv_data}
            options[self.file_extension](self.file_name)

        def read_csv_data(self, file_name):
            try:
                self.data = pd.read_csv(file_name + ".csv")
            except FileNotFoundError:
                print("No such file")
                self.__init__()
            return ModifyData.correct_data(self.data, self.file_name)

        def convert_xlsx(self, file_name):
            self.data = pd.read_excel(file_name + ".xlsx", sheet_name='Vehicles', dtype=str)
            return self.save_csv(self.file_name)

        def save_csv(self, file_name):
            self.data.to_csv(file_name + ".csv", index=False)
            FileInfo.line_counter(self.file_name)
            # Call the ModifyData.correct_data and save the data to attribute
            self.checked_data = ModifyData.correct_data(self.data, self.file_name)


        @staticmethod
        def save_checked_csv(checked_data, filename):
            checked_data.to_csv(filename + "[CHECKED].csv", index=False)


    class FileInfo:
        @staticmethod
        def line_counter(file):
            csv_data_frame = pd.read_csv(file + ".csv")
            lines = csv_data_frame.shape[0]
            if lines > 1:
                print(f'{lines} lines were imported to {file}.csv')
            else:
                print(f'{lines} line was imported to {file}.csv')

        @staticmethod
        def print_data(data):
            print(data)

        @staticmethod
        def print_modified_info(modification_count, filename):
            print(f"{modification_count} cells were corrected in {filename}[CHECKED].csv")


    class ModifyData:
        @classmethod
        def correct_data(cls, data, filename):
            corrected_data = data.replace(to_replace='[^0-9]', value='', regex=True, inplace=False)

            FileHandler.save_checked_csv(corrected_data, filename)
            # Get the number of corrections made
            modification_count = int(data.compare(corrected_data, 'index').count().sum() / 2)
            FileInfo.print_modified_info(modification_count, filename)
            return corrected_data


    data_frame = FileHandler()
  learner_created: false
- name: convoy/convoy.csv
  visible: true
  text: |
    This,is,not proper,sheet.
  learner_created: false
- name: convoy/Vehicles.csv
  visible: true
  text: |
    2,200,fuel cons. 25,tons 14
    4,220l,55,22
    n.8,280,liter per km 69,16 ton
    16,100,34l,24
  learner_created: false
- name: data_one.xlsx.csv
  visible: true
  text: |
    id 8,400 l ,50 l,30 ton
  learner_created: false
- name: convoy/data_one_xlsx[CHECKED].csv
  visible: true
  text: |
    vehicle_id,engine_capacity,fuel_consumption,maximum_load
    8,400,50,30
  learner_created: false
- name: convoy/data_one_xlsx.csv
  visible: true
  text: |
    vehicle_id,engine_capacity,fuel_consumption,maximum_load
    id 8,400 l ,50 l,30 ton
  learner_created: false
- name: test/data_big_chk[CHECKED].csv
  visible: false
  text: |
    vehicle_id,engine_capacity,fuel_consumption,maximum_load
    2,200,25,14
    4,220,55,22
    8,280,69,16
    16,100,34,24
    32,450,56,12
    64,230,44,26
    128,360,30,16
    256,400,40,24
    512,480,60,18
    1024,500,80,30
  learner_created: false
- name: test/data_big_csv.csv
  visible: false
  text: |
    vehicle_id,engine_capacity,fuel_consumption,maximum_load
    2,200,fuel cons. 25,14
    4,220l,55,22
    n.8,280,69,16 ton
    16,100,34l,24
    32,450,56,12
    64,230l,44,26
    128,360l,30,16t
    line 256,400,40l,24
    512,eng_480,60,tons 18
    1024,500,80,30
  learner_created: false
- name: test/data_big_xlsx.xlsx
  visible: false
  learner_created: false
- name: test/data_one_chk[CHECKED].csv
  visible: false
  text: |
    vehicle_id,engine_capacity,fuel_consumption,maximum_load
    8,400,50,30
  learner_created: false
- name: test/data_one_csv.csv
  visible: false
  text: |
    vehicle_id,engine_capacity,fuel_consumption,maximum_load
    id 8,400 l ,50 l,30 ton
  learner_created: false
- name: test/data_one_xlsx.xlsx
  visible: false
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase
    from os import path
    import os
    import shutil
    import re
    import sqlite3
    import json


    class EasyRiderStage1(StageTest):
        files_to_delete = []
        files_to_check = ["data_one_xlsx.xlsx", "data_big_xlsx.xlsx", "data_one_csv.csv", "data_big_csv.csv",
                          "data_one_chk[CHECKED].csv", "data_big_chk[CHECKED].csv", "data_one_sql.s3db", "data_big_sql.s3db"]

        def s3db_generate(self, name):
            name = os.path.join("test", name.strip("chk[CHECKED].csv"))
            self.files_to_delete.append(f'{name}sql.s3db')
            with open(f'{name.strip()}chk[CHECKED].csv', 'r', encoding='utf-8') as file:
                db_convoy = file.readline().strip().split(",")
                conn = sqlite3.connect(f'{name}sql.s3db')
                convoy = conn.cursor()
                convoy.execute(f"CREATE TABLE convoy({db_convoy[0]} INTEGER PRIMARY KEY, {db_convoy[1]} INTEGER NOT NULL, {db_convoy[2]} INTEGER NOT NULL, {db_convoy[3]} INTEGER NOT NULL);")
                conn.commit()
                for line in file:
                    line = line.strip().split(",")
                    convoy.execute(f"INSERT INTO convoy({db_convoy[0]},{db_convoy[1]},{db_convoy[2]},{db_convoy[3]}) "
                                  f"VALUES({line[0]},{line[1]},{line[2]},{line[3]})")
                conn.commit()
                conn.close()

        def remove_s3db_files(self):
            for name in [names.split(".")[0].strip("[CHECKED]") + ".s3db" for names in self.files_to_check]:
                if path.exists(name):
                    os.remove(name)

        def generate(self) -> List[TestCase]:
            self.remove_s3db_files()
            self.s3db_generate("data_one_chk[CHECKED].csv")
            self.s3db_generate("data_big_chk[CHECKED].csv")
            return [
                    TestCase(stdin=[self.prepare_file], attach=("data_one_xlsx.xlsx", 1, "line", 4, "cell", 488, "record", "vehicle")),
                    TestCase(stdin=[self.prepare_file], attach=("data_big_xlsx.xlsx", 10, "line", 12, "cell", 5961, "record", "vehicle")),
                    TestCase(stdin=[self.prepare_file], attach=("data_one_csv.csv", 1, None, 4, "cell", 488, "record", "vehicle")),
                    TestCase(stdin=[self.prepare_file], attach=("data_big_csv.csv", 10, None, 12, "cell", 5961, "record", "vehicle")),
                    TestCase(stdin=[self.prepare_file], attach=("data_one_chk[CHECKED].csv", 1, None, None, "cell", 488, "record", "vehicle")),
                    TestCase(stdin=[self.prepare_file], attach=("data_big_chk[CHECKED].csv", 10, None, None, "cell", 5961, "record", "vehicle")),
                    TestCase(stdin=[self.prepare_file], attach=("data_one_sql.s3db", 1, None, None, "cell", 488, "record", "vehicle")),
                    TestCase(stdin=[self.prepare_file], attach=("data_big_sql.s3db", 10, None, None, "cell", 5961, "record", "vehicle")),
            ]

        def after_all_tests(self):
            for file in set(self.files_to_delete):
                try:
                    os.remove(file)
                except PermissionError:
                    raise WrongAnswer(f"Can't delete the database file: {file}. Looks like database connection wasn't closed.")

        def prepare_file(self, output):
            file_name = self.files_to_check.pop(0)
            shutil.copy(os.path.join("test", file_name), os.path.join("."))
            self.files_to_delete.append(file_name)
            return file_name

        def file_exist(self, file_name):
            if not path.exists(file_name):
                return f"The file '{file_name}' does not exist or is outside of the script directory."
            self.files_to_delete.append(file_name)
            return False

        @staticmethod
        def wrong_number_of_lines_csv(file_name, nr):
            with open(file_name, 'r', encoding='utf-8') as file_csv:
                csv_len = len([x for x in file_csv]) - 1
                if csv_len != nr:
                    return f"Wrong number of lines in file {file_name}. Expected {nr}, found {csv_len}\n" + \
                           "check if you have imported headers and all data is present;\ncheck if you have imported the appropriate sheet.)"
            return False

        @staticmethod
        def check_output(quantity, nr, text, file_name):
            prefix = f"{quantity} {nr}{' was' if quantity == 1 else 's were'}"
            if not text.startswith(prefix):
                return f"Output don't starts with sentence '{prefix}'"
            if file_name not in text:
                return f"There is no {file_name} name in output '{text}'."
            return False

        @staticmethod
        def quality_of_data_csv(file_name, number):
            count = 0
            with open(file_name, 'r', encoding='utf-8') as file:
                for line in file:
                    if not line.startswith("vehicle_id"):
                        for item in line.split(","):
                            if not re.match(r"^[\d]+$", item):
                                return f"In line '{line.strip()}': '{item}' is not a number. Check {file_name}"
                            count += int(item)
            if count != number:
                return f"Check data in {file_name}. Sum of integer should be {number}, found {count}"
            return False

        @staticmethod
        def checking_database(file_name, nr_lines, number):
            conn = sqlite3.connect(file_name)
            convoy = conn.cursor()

            #  checking if table exists
            lines = convoy.execute("SELECT count(name) FROM sqlite_master WHERE type='table' AND name='convoy';").fetchall()
            if lines[0][0] == 0:
                return f"There is no table named 'convoy' in database {file_name}"

            #  counting number of the records
            lines = convoy.execute("SELECT COUNT(*) FROM convoy").fetchone()[0]
            if lines != nr_lines:
                return f"Wrong number of records in database {file_name}. Expected {nr_lines}, found {lines}"

            #  checking column names
            lines = convoy.execute('select * from convoy').description
            if sorted([x[0] for x in lines]) != sorted(['vehicle_id', 'engine_capacity', 'fuel_consumption', 'maximum_load']):
                return f"There is something wrong in {file_name}. Found column names: {[x[0] for x in lines]}. " + \
                       "Expected four columns names: 'vehicle_id', 'engine_capacity', 'fuel_consumption', 'maximum_load'"

            #  checking sum of cells
            all_lines = convoy.execute("SELECT * FROM convoy")
            try:
                count = sum(sum(x) for x in all_lines.fetchall())
            except TypeError:
                return f"There is a value other than INTEGER in the table."
            if count != number:
                return f"Check data. Sum of integer in '.s3db' should be {number}, found {count}."

            #  checking if PRIMARY KEY exists
            all_lines = convoy.execute("SELECT * FROM convoy")
            p_key = all_lines.fetchall()[0][0]
            try:
                convoy.execute(f"INSERT INTO convoy(vehicle_id,engine_capacity,fuel_consumption,maximum_load) VALUES({p_key},0,0,0)")
            except sqlite3.IntegrityError:
                pass
            else:
                return f"There is no PRIMARY KEY parameter on column 'vehicle_id' in {file_name}."

            #  checking if columns have an attribute NOT NULL
            not_null = (('1000', 'Null', '1', '1'), ('1001', '1', 'Null', '1'), ('1002', '1', '1', 'Null'))
            for values in not_null:
                try:
                    convoy.execute(f"INSERT INTO convoy(vehicle_id,engine_capacity,fuel_consumption,maximum_load) "
                                   f"VALUES({values[0]},{values[1]},{values[2]},{values[3]})")
                except sqlite3.IntegrityError:
                    pass
                else:
                    return f"At least one of the columns has no 'NOT NULL' parameter in {file_name}."

            conn.close()
            return False

        @staticmethod
        def checking_json(file_name, number):
            fields = ['vehicle_id', 'engine_capacity', 'fuel_consumption', 'maximum_load']
            count = 0
            with open(file_name, "r") as json_file:
                from_json = json.load(json_file)
            try:
                for item in from_json["convoy"]:
                    for field in fields:
                        try:
                            count += int(item[field])
                        except KeyError:
                            return f"There is no '{field}' key in record {item} in JSON file."
                if count != number:
                    return f"Check data. Sum of integer in JSON should be {number}, found {count}"
            except KeyError:
                return f"There is no 'convoy' key in {file_name}."
            except TypeError:
                return f"There is different data type in JSON file than dictionary."

        def check(self, reply: str, result) -> CheckResult:
            if "input" not in reply.lower():
                return CheckResult.wrong(f"The first line of the output should be 'Input file name'")
            reply = reply.splitlines()
            reply.pop(0)
            if len(reply) == 0:
                return CheckResult.wrong(f"There is not enough lines in the output")
            file_name = result[0].split(".")

            #  => xlsx
            if file_name[1] == "xlsx":

                test = self.file_exist(f'{file_name[0]}.csv')
                if test:
                    return CheckResult.wrong(test)

                test = self.wrong_number_of_lines_csv(f'{file_name[0]}.csv', result[1])
                if test:
                    return CheckResult.wrong(test)

                test = self.check_output(result[1], result[2], reply[0], f'{file_name[0]}.csv')
                if test:
                    return CheckResult.wrong(test)

                reply.pop(0)
                if len(reply) == 0:
                    return CheckResult.wrong(f"There is not enough lines in the output")

            #  => csv
            if any([file_name[1] == "xlsx", all([file_name[1] == "csv", not ".".join(file_name).endswith("[CHECKED].csv")])]):

                test = self.file_exist(f'{file_name[0]}[CHECKED].csv')
                if test:
                    return CheckResult.wrong(test)

                test = self.quality_of_data_csv(f'{file_name[0]}[CHECKED].csv', result[5])
                if test:
                    return CheckResult.wrong(test)

                test = self.check_output(result[3], result[4], reply[0], f'{file_name[0]}[CHECKED].csv')
                if test:
                    return CheckResult.wrong(test)

                reply.pop(0)
                if len(reply) == 0:
                    return CheckResult.wrong(f"There is not enough lines in the output")

            #  => [CHECKED]csv
            if any([file_name[1] == "xlsx", file_name[1] == "csv", ".".join(file_name).endswith("[CHECKED].csv")]):

                file_name[0] = file_name[0].strip("[CHECKED]")
                test = self.file_exist(f'{file_name[0]}.s3db')
                if test:
                    return CheckResult.wrong(test)

                test = self.checking_database(f'{file_name[0]}.s3db', result[1], result[5])
                if test:
                    return CheckResult.wrong(test)

                test = self.check_output(result[1], result[6], reply[0], f'{file_name[0]}.s3db')
                if test:
                    return CheckResult.wrong(test)

                reply.pop(0)
                if len(reply) == 0:
                    return CheckResult.wrong(f"There is not enough lines in the output")

            #  => s3db
            test = self.file_exist(f'{file_name[0]}.json')
            if test:
                return CheckResult.wrong(test)

            test = self.checking_json(f'{file_name[0]}.json', result[5])
            if test:
                return CheckResult.wrong(test)

            test = self.check_output(result[1], result[7], reply[0], f'{file_name[0]}.json')
            if test:
                return CheckResult.wrong(test)

            return CheckResult.correct()


    if __name__ == '__main__':
        EasyRiderStage1('convoy.convoy').run_tests()
  learner_created: false
- name: convoy/data_one_csv.csv
  visible: true
  text: |
    id 8,400 l ,50 l,30 ton
  learner_created: true
- name: data_one_chk[CHECKED][CHECKED].csv
  visible: true
  text: |
    vehicle_id,engine_capacity,fuel_consumption,maximum_load
    8,400,50,30
  learner_created: true
- name: convoy/data_one_csv[CHECKED].csv
  visible: true
  text: |
    id 8,400 l ,50 l,30 ton
  learner_created: true
- name: convoy/data_one_xlsx.xlsx
  visible: true
  learner_created: true
- name: convoy/data_one_xlsx
  visible: true
  learner_created: true
- name: convoy/data_one_xlsx.s3db
  visible: true
  learner_created: true
- name: convoy/data_one_xlsx.json
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/12011#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 23 Mar 2021 02:42:34 UTC
record: 4
