type: edu
files:
- name: convoy/convoy.py
  visible: true
  text: |-
    # Write your code here
    import pandas as pd
    # import os

    print("Input file name: ")
    # result = 'data_one.xlsx'
    result = input()
    file_name = result.split(".")
    read_file = pd.read_excel (result , sheet_name='Vehicles')
    # file_name = 'data_one.xlsx'

    # print(file_name.split(".")[0])
    # read_file = pd.read_excel (r'convoy.xlsx', sheet_name='Vehicles')
    # read_file.to_csv (r'Vehicles.csv', index = None, header=False)
    file = file_name[0] + ".csv"
    read_file.to_csv (file , index = None, header=True)
    # file = open(file_name + ".csv", 'r')
    # # print()
    # lines= len(list(file))
    with open(file, 'r', encoding='utf-8') as file_csv:
        csv_len = len([x for x in file_csv]) - 1
    # print(csv_len)
    # line = read_file.shape[0]
    # print(line)
    if csv_len > 1:
        print(f"{csv_len} lines were imported to {file}")
    else:
        print(f"{csv_len} line was imported to {file}")
  learner_created: false
- name: convoy/convoy.csv
  visible: true
  text: |
    This,is,not proper,sheet.
  learner_created: false
- name: convoy/Vehicles.csv
  visible: true
  text: |
    2,200,fuel cons. 25,tons 14
    4,220l,55,22
    n.8,280,liter per km 69,16 ton
    16,100,34l,24
  learner_created: false
- name: data_one.xlsx.csv
  visible: true
  text: |
    id 8,400 l ,50 l,30 ton
  learner_created: false
- name: convoy/data_one.csv
  visible: true
  text: |
    id 8,400 l ,50 l,30 ton
  learner_created: false
- name: test/data_big_csv.csv
  visible: false
  text: |
    vehicle_id,engine_capacity,fuel_consumption,maximum_load
    2,200,fuel cons. 25,14
    4,220l,55,22
    n.8,280,69,16 ton
    16,100,34l,24
    32,450,56,12
    64,230l,44,26
    128,360l,30,16t
    line 256,400,40l,24
    512,eng_480,60,tons 18
    1024,500,80,30
  learner_created: false
- name: test/data_big_xlsx.xlsx
  visible: false
  learner_created: false
- name: test/data_one_csv.csv
  visible: false
  text: |
    vehicle_id,engine_capacity,fuel_consumption,maximum_load
    id 8,400 l ,50 l,30 ton
  learner_created: false
- name: test/data_one_xlsx.xlsx
  visible: false
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase
    from os import path
    import shutil
    import re
    import os


    class EasyRiderStage1(StageTest):
        files_to_delete = []
        files_to_check = ["data_one_xlsx.xlsx", "data_big_xlsx.xlsx", "data_one_csv.csv", "data_big_csv.csv"]

        def generate(self) -> List[TestCase]:
            return [
                    TestCase(stdin=[self.prepare_file], attach=("data_one_xlsx.xlsx", 1, "line", 4, "cell", 488)),
                    TestCase(stdin=[self.prepare_file], attach=("data_big_xlsx.xlsx", 10, "line", 12, "cell", 5961)),
                    TestCase(stdin=[self.prepare_file], attach=("data_one_csv.csv", 1, None, 4, "cell", 488)),
                    TestCase(stdin=[self.prepare_file], attach=("data_big_csv.csv", 12, None, 12, "cell", 5961)),
            ]

        def after_all_tests(self):
            for file in set(self.files_to_delete):
                try:
                    os.remove(file)
                except PermissionError:
                    raise WrongAnswer(f"Can't delete the database file: {file}. Looks like database connection wasn't closed.")

        def prepare_file(self, output):
            file_name = self.files_to_check.pop(0)
            shutil.copy(path.join("test", file_name), path.join("."))
            self.files_to_delete.append(file_name)
            return file_name

        def file_exist(self, file_name):
            if not path.exists(file_name):
                return f"The file '{file_name}' does not exist or is outside of the script directory."
            self.files_to_delete.append(file_name)
            return False

        @staticmethod
        def wrong_number_of_lines_csv(file_name, nr):
            with open(file_name, 'r', encoding='utf-8') as file_csv:
                csv_len = len([x for x in file_csv]) - 1
                if csv_len != nr:
                    return f"Wrong number of lines in file {file_name}. Expected {nr}, found {csv_len}\ncheck if you have imported headers and all data is present;\ncheck if you have imported the appropriate sheet.)"
            return False

        @staticmethod
        def check_output(quantity, nr, text, file_name):
            prefix = f"{quantity} {nr}{' was' if quantity == 1 else 's were'}"
            if not text.startswith(prefix):
                return f"Output don't starts with sentence '{prefix}'"
            if file_name not in text:
                return f"There is no {file_name} name in output '{text}'."
            return False

        @staticmethod
        def quality_of_data_csv(file_name, number):
            count = 0
            with open(file_name, 'r', encoding='utf-8') as file:
                for line in file:
                    if not line.startswith("vehicle_id"):
                        for item in line.split(","):
                            if not re.match(r"^[\d]+$", item):
                                return f"In line '{line.strip()}': '{item}' is not a number. Check {file_name}"
                            count += int(item)
            if count != number:
                return f"Check data in {file_name}. Sum of integer should be {number}, found {count}"
            return False

        def check(self, reply: str, result) -> CheckResult:
            if "input" not in reply.lower():
                return CheckResult.wrong(f"The first line of the output should be 'Input file name'")
            reply = reply.splitlines()
            reply.pop(0)
            if len(reply) == 0:
                return CheckResult.wrong(f"There is not enough lines in the output")
            file_name = result[0].split(".")

    #  => xlsx

            if file_name[1] == "xlsx":

                test = self.file_exist(f'{file_name[0]}.csv')
                if test:
                    return CheckResult.wrong(test)

                test = self.wrong_number_of_lines_csv(f'{file_name[0]}.csv', result[1])
                if test:
                    return CheckResult.wrong(test)

                test = self.check_output(result[1], result[2], reply[0], f'{file_name[0]}.csv')
                if test:
                    return CheckResult.wrong(test)

                reply.pop(0)
                if len(reply) == 0:
                    return CheckResult.wrong(f"There is not enough lines in the output")


    #  => csv

            if any([file_name[1] == "xlsx", all([file_name[1] == "csv", not ".".join(file_name).endswith("[CHECKED].csv")])]):

                test = self.file_exist(f'{file_name[0]}[CHECKED].csv')
                if test:
                    return CheckResult.wrong(test)

                test = self.quality_of_data_csv(f'{file_name[0]}[CHECKED].csv', result[5])
                if test:
                    return CheckResult.wrong(test)

                test = self.check_output(result[3], result[4], reply[0], f'{file_name[0]}[CHECKED].csv')
                if test:
                    return CheckResult.wrong(test)

                reply.pop(0)
            return CheckResult.correct()


    if __name__ == '__main__':
        EasyRiderStage1('convoy.convoy').run_tests()
  learner_created: false
- name: convoy/data_one_xlsx.csv
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/12009#comment
status: Solved
record: 1
