type: edu
files:
- name: knightstour/game.py
  visible: true
  text: |-
    class Board:
        def __init__(self, dim):
            self.x = dim[0]
            self.y = dim[1]
            self.len_x = len(str(dim[0] * dim[1]))
            self.len_y = len(str(dim[1]))
            self.board = [["_"] * dim[0] for _ in range(dim[1])]

        def print_board(self):
            print(f"{' ' * self.len_y}{'-' * (3 + (self.len_x +1) * self.x)}")
            for i in range(self.y - 1, -1, -1):
                print(f"{' ' * (self.len_y - len(str(i + 1))) + str(i + 1)}|"
                      f" {' '.join([self.board[i][j] * self.len_x if self.board[i][j] == '_' else ' ' * (self.len_x - 1) + 'X' for j in range(self.x)])} |")
            print(f"{' ' * self.len_y}{'-' * (3 + (self.len_x +1) * self.x)}")
            print(f"   {' '.join([' ' * (self.len_x - len(str(i))) + str(i + 1) for i in range(self.x)])}")

        def move_knight(self, pos):
            self.board[pos.y][pos.x] = "X"


    class Knight:
        def __init__(self, dim):
            self.y = dim[1] - 1
            self.x = dim[0] - 1


    def check_input(str, b=False):
        try:
            x_i, y_i = list(map(int, str.split(" ")))
        except ValueError:
            return False
        if b and any([x_i < 1, x_i > b.x, y_i < 1, y_i > b.y]):
            return False
        else:
            if any([x_i < 1, y_i < 1]):
                return False
        return [x_i, y_i]


    while True:
        ans = check_input(input("Enter your board dimensions: "))
        if ans:
            break
        else:
            print("Invalid")
    board = Board(ans)
    while True:
        ans = check_input(input("Enter the knight's starting position: "), board)
        if ans:
            break
        else:
            print("Invalid")
    knight = Knight(ans)
    board.move_knight(knight)
    board.print_board()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    # from hstest.stage_test import StageTest
    from hstest.stage_test import *
    from hstest.test_case import TestCase, SimpleTestCase
    from hstest.check_result import CheckResult
    from copy import deepcopy
    import random

    # constants
    DIRECTIONS = 8
    move_x = [2, 1, -1, -2, -2, -1, 1, 2]
    move_y = [1, 2, 2, 1, -1, -2, -2, -1]


    def digits(num):
        return len(str(num))


    def checkMove(board):
        movelist = []
        for i in range(DIRECTIONS):
            new_x = x_start + move_x[i]  # user coordinates 1 - n
            new_y = y_start + move_y[i]  # user coordinates 1 - n
            if new_x in range(1, ncols+1) and new_y in range(1, nrows + 1):
                movelist.append([new_x, new_y])
        for i in range(ncols):          # i = x = cols
            for j in range(nrows):      # j = y = rows
                if [i+1, j+1] in movelist:
                    possible = warnsdorff(i + 1 , j + 1, board)
                    if board[j][i] != str(possible):
                        return False, CheckResult.wrong("Incorrect value or marker missing from possible move")
                elif i+1 == x_start and j+1 == y_start:
                    if board[j][i] not in ["x", "X"]:
                        return False, CheckResult.wrong("Incorrect starting position or marker")
                else:
                    if "_" not in board[j][i]:
                        return False, CheckResult.wrong("Markers placed in wrong location")
        return True, CheckResult.correct()


    def warnsdorff(cur_x, cur_y, board):
        possible = 0
        for i in range(DIRECTIONS):
            new_x = cur_x + move_x[i]   # user coordinates 1 - n
            new_y = cur_y + move_y[i]   # user coordinates 1 - n
            if validMove(new_x, new_y, board):
                possible += 1
        return possible


    def validMove(x, y, board):  # user coordinates 1 - n
        if not onBoard(x, y):
            return False

        if not "_" in board[y-1][x-1]:
            return False
        return True


    def onBoard(x, y):  # user coordinates 1 - n
        if x > 0 and y > 0 and x <= ncols and y <= nrows:
            return True
        return False

    random.seed()
    ncols = random.randint(3, 8)
    nrows = random.randint(3, 8)

    yaxiswidth = digits(nrows)
    xaxiswidth = digits(nrows * ncols)
    size = str(ncols) + " " + str(nrows)
    x_start = random.randint(3, ncols)
    y_start = random.randint(3, nrows)
    start = str(x_start) + " " + str(y_start)


    class KnightsTourTest(StageTest):
        def generate(self) -> List[TestCase]:
            return [TestCase(stdin=[self.check_request_size, self.check_request_start]),
                    TestCase(stdin=["-1 10", size, start], check_function=self.check_bounds),
                    TestCase(stdin=["1", size, start], check_function=self.check_length),
                    TestCase(stdin=["a 10", size, start], check_function=self.check_num),
                    TestCase(stdin=[size, "0 0", start], check_function=self.check_bounds),
                    TestCase(stdin=[size, "1", start], check_function=self.check_length),
                    TestCase(stdin=[size, "a 1", start], check_function=self.check_num),
                    TestCase(stdin=[size, "-1 " + str(y_start), start], check_function=self.check_bounds),
                    TestCase(stdin=[size, str(ncols + 1) + " " + str(nrows + 1), start], check_function=self.check_bounds),
                    TestCase(stdin=[size, start]), ]

        def check_request_size(self, output):
            output = output.lower()
            if "dimension" not in output:
                return CheckResult.wrong("Your program should ask for the board dimensions")
            return size

        def check_request_start(self, output):
            output = output.lower()
            if "position" not in output:
                return CheckResult.wrong("Your program should ask for the knight's starting position")
            return start

        def check_bounds(self, reply: str, attach: Any) -> CheckResult:
            if "invalid" not in reply.lower():
                return CheckResult.wrong("Your program should check if the board size and position are within bounds")
            return CheckResult.correct()

        def check_length(self, reply: str, attach: Any) -> CheckResult:
            if "invalid" not in reply.lower():
                return CheckResult.wrong("Your program should check if there are the right number of inputs")
            return CheckResult.correct()

        def check_num(self, reply: str, attach: Any) -> CheckResult:
            if "invalid" not in reply.lower():
                return CheckResult.wrong("Your program should only accept integer inputs")
            return CheckResult.correct()

        def check(self, reply: str, attach: Any) -> CheckResult:
            # check output
            try:
                if reply == "":
                    return CheckResult.wrong("Output was empty")
                border = "-" * (ncols * (xaxiswidth+1) + 3) + "\n"
                if border not in reply:
                    return CheckResult.wrong(f"The board borders aren't found.\n"
                                             f"For a board of {ncols} columns and cell width {xaxiswidth}, \n"
                                             f"the following line should be printed as a border:\n"
                                             f"{border}\n"
                                             f"That is, a line of length {len(border)}.")
                reply = reply.split(border)
                if len(reply) != 3:
                    return CheckResult.wrong("Incorrect border or spacing. \n"
                                             "There should be 2 identical borders for a board.\n"
                                             f"For a board of {ncols} columns and cell width {xaxiswidth}, \n"
                                             f"the following line should be printed as a border:\n"
                                             f"{border}\n"
                                             f"That is, a line of length {len(border)}.")
            except:
                return CheckResult.wrong("Incorrect output")

            # extract board and xlabels
            try:
                board = reply[1].split(" |\n")[0:nrows]
                if len(board) != nrows:
                    return CheckResult.wrong("Incorrect side borders or format")

                xaxis1 = deepcopy(reply[2])
                xaxis1 = xaxis1.strip().split()
                xaxis2 = deepcopy(reply[2])
                if len(xaxis1) != ncols:
                    return CheckResult.wrong("Incorrect column numbers")
            except IndexError:
                return CheckResult.wrong("Incorrect border or spacing")

            # check location of xcol = 1 for alignment
            try:
                x_one_pos = yaxiswidth + 1 + 1 + xaxiswidth
                if xaxis2[x_one_pos - 1] != "1":
                    return CheckResult.wrong("Incorrect column number alignment or placeholder width")
                xaxis2 = xaxis2.strip()
                # check rest of column numbers for alignment
                for n in range(1, ncols):
                    xaxis2 = xaxis2.split(" " * (xaxiswidth - digits(n + 1) + 1), 1)
                    if len(xaxis2) != 2:
                        return CheckResult.wrong("Spacing between column numbers is incorrect")
                    if str(n) != xaxis2[0]:
                        return CheckResult.wrong("Incorrect column number alignment or placeholder width")
                    xaxis2 = xaxis2[1]
                if str(ncols) != xaxis2:
                    return CheckResult.wrong("Incorrect column number alignment or placeholder width")
            except:
                return CheckResult.wrong("There is something wrong with your column numbers")

            board2 = []
            # iterate through rows to check
            for n, row in enumerate(board):
                rownum = nrows - n
                colnum = n + 1

                # check column numbers
                if colnum > ncols:
                    pass
                elif colnum != int(xaxis1[n]):
                    return CheckResult.wrong("Incorrect column numbers")

                # split at left border, check if row split correctly
                row = row.split("|")
                if len(row) != 2:
                    return CheckResult.wrong("Incorrect side borders or format")

                if len(row[0]) != yaxiswidth:
                    return CheckResult.wrong("Row numbers or side border not aligned")

                board2.append(row[1].split())

                # check if knight in correct position
                if rownum == y_start:

                    # check row number
                    if rownum != int(row[0]):
                        return CheckResult.wrong("Incorrect row numbers")

                    # extract each position, including placeholders and knight
                    row = row[1].strip().split()

                    #   check if number of columns is correct
                    if len(row) != ncols:
                        return CheckResult.wrong("Incorrect board dimension")

                    # check correct position
                    if row[x_start - 1] not in ['x', 'X']:
                        return CheckResult.wrong("Incorrect starting position or marker")

                    # check this row if placeholders are correct
                    for place in row:
                        if place not in ['x', 'X']:
                            if place != '_' * xaxiswidth:
                                return CheckResult.wrong("Incorrect placeholder width or marker")

            # check possible moves
            board2 = board2[::-1]
            valid_board, message = checkMove(board2)
            if valid_board:
                pass
            else:
                return message

            return CheckResult.correct()


    if __name__ == '__main__':
        KnightsTourTest().run_tests()
  learner_created: false
- name: knightstour/controller.py
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/141/stages/749/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 28 Mar 2021 23:50:54 UTC
record: 4
